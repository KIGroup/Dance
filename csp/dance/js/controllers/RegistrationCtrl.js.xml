<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="dance/js/controllers/RegistrationCtrl.js" application="/csp/dance/" default="1"><![CDATA[
'use strict';
//   d d   
 
/*===========================================================================================
Registration         
===========================================================================================*/
  
controllersModule.controller('RegistrationCtrl', function($scope, $timeout, $cookies, $location, $window, $routeParams, $filter, UtilsSrvc, OtherSrvc, PersonSrvc, TournamentSrvc, CompetitionSrvc, TournamentRankSrvc, TournamentStatusSrvc, RegistrationSrvc, ParticipantSrvc, CoupleSrvc){
	$scope.menu.pages.selected = {};
    $scope.menu.shortMenu = true;
	 
	if ($routeParams.recorderHash){
        $cookies.recorderHash = $routeParams.recorderHash;
    }
    $cookies.recorderHash = $cookies.recorderHash || "none"; 
    console.log('$cookies.recorderHash', $cookies.recorderHash);
	
    $scope.pageStore.registration = $scope.pageStore.registration || {grid:{}};  
    
    $scope.tabUDSR = {
        searchForm: {}
    };

    $scope.tabWDSF = {
        searchForm: {},
        formCouple: {
            btnBackVisible: true,
            btnNextVisible: true
        },
        formSingle: {
            btnBackVisible: true,
            btnNextVisible: true
        }
    };
    
    $scope.tabOTHER = {
        couple: {},
        athlete: null,
        genders: [
            {name: $filter('localize')('Мужской'), code: 'Male'}, 
            {name: $filter('localize')('Женский'), code: 'Female'}
        ],
        formCouple: {
            btnBackVisible: false,
            btnNextVisible: true
        },
        formSingle: {
            btnBackVisible: false,
            btnNextVisible: true
        }  
    };

    $scope.competitionTable = {};

    $scope.init = function(){
        //    
        // Competition table
        //
        $scope.competitionTable.columns = [
                          {name: 'Дата', sqlName: 'StartDate', isSorted: true , isSortable: false , isDown: true , isSearched: false , isSearchable: false, filter: 'date', captionStyle: {width: '130px'}},
                          {name: 'Время', sqlName: 'StartTime', isSorted: false, isSortable: false , isDown: true , isSearched: false , isSearchable: false, captionStyle: {width: '70px'}},
                          {name: 'Название', sqlName: 'Name->Value', isSorted: false, isSortable: false , isDown: true , isSearched: false , isSearchable: false},
                          {name: 'Программа', sqlName: 'Discipline->Name->Value', isSorted: false, isSortable: false , isDown: true , isSearched: false , isSearchable: false},
                          {name: 'Возрастная группа', sqlName: 'AgeCategory', isSorted: false, isSortable: false, isDown: true , isSearched: false , isSearchable: false},
                          {name: 'Класс', sqlName: '', isSorted: false, isSortable: false, isDown: true , isSearched: false , isSearchable: false},
                          {name: 'Тип', sqlName: 'Type->Name->Value', isSorted: false, isSortable: false , isDown: true , isSearched: false , isSearchable: false, captionStyle: {width: '50px'}},
                          {name: 'Цена', sqlName: 'Price', isSorted: false, isSortable: false , isDown: true , isSearched: false , isSearchable: false, captionStyle: {textAlign: 'right', width: '50px'}}];
        
        $scope.competitionTable.properties = [
                          {name:'startDate', filter: 'date', filterParam: $filter('localize')('d MMMM y')},
                          {name:'startTime'},
                          {name:'fullName',
                                calculate: function(item){
                                    item.fullName = item.name;
                                    if (item.wdsf && item.wdsf.status != 'Registering'){
                                        item.fullName += ' (WDSF status is ' + item.wdsf.status + ' !)';
                                    } 
                                }},
                          {name:'discipline.name'},
                          {name:'ageCategory.fullName', 
                                calculate: function(item){
	                                if (!item.ageCategory) 
	                                	return '';
                                    item.ageCategory.fullName = item.ageCategory.name + ' (' + item.ageCategory.minAge + ' - ' + item.ageCategory.maxAge + ')';
                                }},
                          {name:'dancerClassesString', 
                                calculate: function(item){
                                    item.dancerClassesString = '';
                                    for(var i=0; i < item.dancerClasses.length; i++){
                                        item.dancerClassesString = item.dancerClassesString + ', ' + item.dancerClasses[i].name;
                                    }

                                    item.dancerClassesString = item.dancerClassesString.substring(2, item.dancerClassesString.length);
                                }},
                          {name:'type.name'},
                          {name:'price', cellStyle: {textAlign: 'right'}}];

        $scope.competitionTable.pageSize = 1000; 
        $scope.competitionTable.pageCurr = 1;
        $scope.competitionTable.itemsTotal = 0;
        $scope.competitionTable.selectable = false;
        $scope.competitionTable.selectedItems = [];
        $scope.competitionTable.multiSelectMode = true;
        $scope.competitionTable.forciblyUpdate = 0;

        $scope.pageStore.registration.grid.tableShortView = $scope.pageStore.registration.grid.tableShortView == null ? true : $scope.pageStore.registration.grid.tableShortView;
        
        if ($scope.pageStore.registration.grid.tableShortView){
            $scope.competitionTable.setHiddenCoulumns(true);
        }
        else{
            $scope.competitionTable.setHiddenCoulumns(false);
        }  
    };

    /// Load All Competitions in Tournament  
    $scope.competitionTable.loadItems = function(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText){
        if (!$scope.tournament)
            return;
         
        $scope.competitionTable.items = [];
        $scope.competitionTable.selectedItems = [];
        $scope.competitionTable.itemsStatus = $filter('localize')('Идет загрузка групп...');

        var dataSending= {
            type: $scope.selectedTab, /* UDSR, WDSF, OTHER*/
            tournamentId: $scope.tournament.id
        };

        if ($scope.competitionTable.avialableMode){
            dataSending.couple = $scope['tab' + $scope.selectedTab].couple || null;
            dataSending.athlete = $scope['tab' + $scope.selectedTab].athlete || null;
        
            CompetitionSrvc.getAllAvialableForGrid(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, dataSending).then(
                function(data){
                    data = data.children;
                    $scope.competitionTable.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                    $scope.competitionTable.itemsTotal = data.itemsTotal;
                    $scope.competitionTable.items = data.items; 
                    $scope.competitionTable.onSelect(null);

                    $scope.competitionTable.itemsStatus = data.items.length == 0 ? $filter('localize')('Нет доступных групп.') : '';
                },
                function(data, status, headers, config){
                    $scope.cmpAlert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
                    $scope.competitionTable.itemsStatus = $filter('localize')('Произошла ошибка при загрузке групп.');
                });
        }
        else{
            CompetitionSrvc.getAllForGrid(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, dataSending).then(
                function(data){
                    data = data.children;
                    $scope.competitionTable.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                    $scope.competitionTable.itemsTotal = data.itemsTotal;
                    $scope.competitionTable.items = data.items; 
                    $scope.competitionTable.caption = $filter('localize')('Все группы');

                    $scope.competitionTable.itemsStatus = data.items.length == 0 ? $filter('localize')('Нет доступных групп.') : '';
                },
                function(data, status, headers, config){
                    $scope.cmpAlert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
                    $scope.competitionTable.itemsStatus = $filter('localize')('Произошла ошибка при загрузке групп.');
                });
        }
    };

    $scope.competitionTable.setHiddenCoulumns = function(value){
        var indexes = [1,3,4,5,6];
        for(var n=0; n < indexes.length; n++){
            $scope.competitionTable.columns[indexes[n]].hidden = value;     
        }
    };

    // Select competition
    $scope.competitionTable.onSelect = function(item){
        $scope.competitionTable.caption = $filter('localize')('Доступные группы для регистрации.') + ' ' + $filter('localize')('Выбрано %1 из %2.')
                                               .replace(/%1/g, $scope.competitionTable.selectedItems.length)
                                               .replace(/%2/g, $scope.competitionTable.items.length);                                    
    };

    /// Refresh competition table  
    $scope.competitionTable.refresh = function(){ 
        $scope.competitionTable.forciblyUpdate++; 
    };

    $scope.competitionTable.getSelectedIdArray = function(){ 
        var idArray = [];
        for (var i=0; i < $scope.competitionTable.selectedItems.length; i++){
            idArray.push($scope.competitionTable.selectedItems[i].id);
        } 

        return idArray;
    };

    /// Load Tournament by ID   
    $scope.loadTournament = function(id){
        TournamentSrvc.getById(id, "?loadFullName=1&loadStatus=1").then(
            function(data){
                $scope.tournament = data;
                if (data.status.code != 'Registration'){
                    $scope.tabUDSR.visible = false;
                    $scope.tabWDSF.visible = false;
                    $scope.tabOTHER.visible = false;
                    $scope.alert = UtilsSrvc.getAlert('Внимание!', 'Регистрация в турнир завершена.', 'error', true);
                    return;
                }

                $scope.tabUDSR.visible = data.tabUDSRAllowed == 1;
                $scope.tabWDSF.visible = data.tabWDSFAllowed == 1;
                $scope.tabOTHER.visible = data.tabOtherAllowed == 1;
                $scope.competitionTable.refresh();
            },
            function(data, status, headers, config){
                $scope.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });
    };


    $scope.openParticipantCompetitions = function(type){
        switch(type){
            case 'UDSR':
            $location.path('/tournament/' + $scope.tournament.id + ($scope.tabUDSR.couple ? '/couple/' + $scope.tabUDSR.couple.id : '/athlete/' + $scope.tabUDSR.athlete.id) + '/competitions');
            break;

            case 'WDSF':
            $location.path('/tournament/' + $scope.tournament.id + ($scope.tabWDSF.couple ? '/couple/' + $scope.tabWDSF.couple.id : '/athlete/' + $scope.tabWDSF.athlete.id) + '/competitions');
            break;

            case 'OTHER':
            $location.path('/tournament/' + $scope.tournament.id + '/other' + ($scope.tabOTHER.couple ? '/couple/' + $scope.tabOTHER.couple.key : '/athlete/' + $scope.tabOTHER.athlete.key) + '/competitions');
            break;            
        }
    };


    $scope.loadCountParticipantCompetitions = function(type){
        var filter = '?tournamentId=' + $scope.tournament.id;
        switch(type){
            case 'UDSR':
                filter +=  $scope.tabUDSR.couple ? ('&coupleId=' + $scope.tabUDSR.couple.id) : '';
                filter +=  $scope.tabUDSR.athlete ? ('&athleteId=' + $scope.tabUDSR.athlete.id) : '';
                break;
            case 'WDSF':
                filter +=  $scope.tabWDSF.couple ? ('&coupleId=' + $scope.tabWDSF.couple.id) : '';
                filter +=  $scope.tabWDSF.athlete ? ('&athleteId=' + $scope.tabWDSF.athlete.id) : '';
                break;
            case 'OTHER':
                filter +=  $scope.tabOTHER.couple ? ('&coupleKey=' + $scope.tabOTHER.couple.key) : '';
                filter +=  $scope.tabOTHER.athlete ? ('&athleteKey=' + $scope.tabOTHER.athlete.key) : '';
                break;
        }

        $scope.regCompetitionsCount = 0;

        ParticipantSrvc.getCompetitionsCount(filter).then(
            function(data){
                $scope.regCompetitionsCount = data.count;
            },
            function(data, status, headers, config){
                $scope.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });
    };

    // ===========================================================================================================================================
    // Tab UDSR                                                                                                                           Tab UDSR
    // ===========================================================================================================================================
    $scope.tabUDSR.select = function(){
        $scope.selectedTab = 'UDSR';
        console.log('tabUDSR.select');
        $scope.competitionTable.refresh();
    };

    $scope.tabUDSR.searchForm.search = function(manNumber, womanNumber){
        if (manNumber == '' && womanNumber == '')
            return;

        $scope.tabUDSR.searchForm.processing = true;

        var afterSuccess = function(){
            $scope.tabWDSF.disabled = true;
            $scope.tabOTHER.disabled = true;
            $scope.tabUDSR.searchForm.processing = false;
            $scope.competitionTable.avialableMode = true;
            $scope.competitionTable.selectable = true; 
            $scope.competitionTable.refresh();
            $scope.loadCountParticipantCompetitions('UDSR');  
        };

        if (manNumber != '' && womanNumber != ''){
            CoupleSrvc.getUDSRByNumbers(manNumber, womanNumber).then(
                function(data){
                    $scope.tabUDSR.couple = data;
                    afterSuccess();
                },
                function(data, status, headers, config){
                    $scope.tabUDSR.searchForm.processing = false;
                    $scope.tabUDSR.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
                });  
        }
        else{
            PersonSrvc.getByUDSRNumber(manNumber ? manNumber : womanNumber).then(
                function(data){
                    $scope.tabUDSR.athlete = data;
                    afterSuccess();
                },
                function(data, status, headers, config){
                    $scope.tabUDSR.searchForm.processing = false;
                    $scope.tabUDSR.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
                });  
        }
    };

    $scope.tabUDSR.searchForm.clear = function(){
        $scope.form_udsrSearch.$setPristine();
        $scope.tabUDSR.searchForm.manNumber = '';
        $scope.tabUDSR.searchForm.womanNumber = '';
        $scope.tabUDSR.couple = null;
        $scope.tabUDSR.athlete = null; 
    };

    $scope.tabUDSR.back = function(){
        $scope.tabUDSR.searchForm.clear();
        $scope.tabWDSF.disabled = false;
        $scope.tabOTHER.disabled = false;
        $scope.tabUDSR.searchForm.processing = false;
        $scope.competitionTable.avialableMode = false;
        $scope.competitionTable.selectable = false;
        $scope.competitionTable.refresh();  
    };

    $scope.tabUDSR.registration = function(){
        var postData = {
            competitions: $scope.competitionTable.getSelectedIdArray(),
            couple: $scope.tabUDSR.couple || null,
            athlete: $scope.tabUDSR.athlete || null,
            recorderHash: $cookies.recorderHash 
        };

        RegistrationSrvc.UDSR(postData).then(
            function(data){
                $scope.regResponse = data;
                $scope.resultTableVisible = true;
                $scope.loadCountParticipantCompetitions('UDSR');
                console.log('reg success', data);
            },
            function(data){
                $scope.regResponse = data;
                $scope.resultTableVisible = true;
                $scope.tabUDSR.alert = UtilsSrvc.getAlert('Внимание!', data.message, 'error', true);
                console.log('reg error', data);
            });  
    };


    // ===========================================================================================================================================
    // Tab WDSF                                                                                                                           Tab WDSF
    // ===========================================================================================================================================
    $scope.tabWDSF.select = function(){
        $scope.selectedTab = 'WDSF';
        $scope.competitionTable.refresh();
    };

    $scope.tabWDSF.searchForm.search = function(manNumber, womanNumber){
        if (manNumber == '' && womanNumber == '')
            return;

        $scope.tabWDSF.searchForm.processing = true;

        var afterSuccess = function(){
            $scope.tabUDSR.disabled = true;
            $scope.tabOTHER.disabled = true;
            $scope.tabWDSF.searchForm.processing = false;
            $scope.loadCountParticipantCompetitions('WDSF');
        };

        if (manNumber != '' && womanNumber != ''){
            CoupleSrvc.getWDSFByNumbers(manNumber, womanNumber).then(
                function(data){
                    $scope.tabWDSF.couple = data;
                    afterSuccess();
                    if (data.otherInfo.status != 'Active'){
                        $scope.tabWDSF.formCouple.disabled = true;
                        $scope.tabWDSF.alert = UtilsSrvc.getAlert('Внимание!', 'Статус пары не "Active"! Регистрация пары невозможна.', 'error', true);
                    }
                },
                function(data, status, headers, config){
                    $scope.tabWDSF.searchForm.processing = false;
                    $scope.tabWDSF.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
                });  
        }
        else{
            PersonSrvc.getByWDSFNumber(manNumber ? manNumber : womanNumber).then(
                function(data){
                    $scope.tabWDSF.athlete = data;
                    afterSuccess();
                },
                function(data, status, headers, config){
                    $scope.tabWDSF.searchForm.processing = false;
                    $scope.tabWDSF.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
                });  
        }
    };

    $scope.tabWDSF.searchForm.clear = function(){
        $scope.form_wdsfSearch.$setPristine();
        $scope.tabWDSF.searchForm.manNumber = '';
        $scope.tabWDSF.searchForm.womanNumber = '';
        $scope.tabWDSF.couple = null;
        $scope.tabWDSF.athlete = null; 
    };

    $scope.tabWDSF.formCouple.back = function(){
        if ($scope.tabWDSF.formCouple.btnRegistrationVisible){
            $scope.tabWDSF.formCouple.btnNextVisible = true;
            $scope.tabWDSF.formCouple.btnRegistrationVisible = false;
            $scope.regCompetitionsCount = 0;
        }
        else{
            $scope.tabWDSF.searchForm.clear();
            $scope.tabUDSR.disabled = false;
            $scope.tabOTHER.disabled = false;
            $scope.tabWDSF.searchForm.processing = false;    
        }

        $scope.tabWDSF.alert.visible = false;
        $scope.tabWDSF.formCouple.disabled = false;
        $scope.competitionTable.avialableMode = false;
        $scope.competitionTable.selectable = false;
        $scope.competitionTable.refresh();  
    };

    $scope.tabWDSF.formCouple.next = function(){
        $scope.tabWDSF.couple.man.dob = UtilsSrvc.getValidDate($scope.tabWDSF.couple.man.dob);
        $scope.tabWDSF.couple.woman.dob = UtilsSrvc.getValidDate($scope.tabWDSF.couple.woman.dob);
        
        if ($scope.tabWDSF.couple.man.dob == "" || $scope.tabWDSF.couple.woman.dob == ""){
            return;
        }

        $scope.tabWDSF.formCouple.disabled = true;
        $scope.tabWDSF.formCouple.btnNextVisible = false;
        $scope.tabWDSF.formCouple.btnRegistrationVisible = true;
        
        $scope.competitionTable.selectable = true; 
        $scope.competitionTable.avialableMode = true;
        $scope.competitionTable.refresh();  
    };

    $scope.tabWDSF.formSingle.back = function(){
        if ($scope.tabWDSF.formSingle.btnRegistrationVisible){
            $scope.tabWDSF.formSingle.btnNextVisible = true;
            $scope.tabWDSF.formSingle.btnRegistrationVisible = false;
            $scope.regCompetitionsCount = 0;
        }
        else{
            $scope.tabWDSF.searchForm.clear();
            $scope.tabUDSR.disabled = false;
            $scope.tabOTHER.disabled = false;
            $scope.tabWDSF.searchForm.processing = false;    
        }

        $scope.tabWDSF.formSingle.disabled = false;
        $scope.competitionTable.avialableMode = false;
        $scope.competitionTable.selectable = false;
        $scope.competitionTable.refresh();  
    };
  
    $scope.tabWDSF.formSingle.next = function(){
        $scope.tabWDSF.athlete.dob = UtilsSrvc.getValidDate($scope.tabWDSF.athlete.dob);
        
        if ($scope.tabWDSF.athlete.dob == ""){
            return;
        }

        $scope.tabWDSF.formSingle.disabled = true;
        $scope.tabWDSF.formSingle.btnNextVisible = false;
        $scope.tabWDSF.formSingle.btnRegistrationVisible = true;
        
        $scope.loadCountParticipantCompetitions('WDSF');

        $scope.competitionTable.selectable = true; 
        $scope.competitionTable.avialableMode = true;
        $scope.competitionTable.refresh();  
    };


    $scope.tabWDSF.registration = function(){
        var postData = {
            competitions: $scope.competitionTable.getSelectedIdArray(),
            couple: $scope.tabWDSF.couple || null,
            athlete: $scope.tabWDSF.athlete || null,
            recorderHash: $cookies.recorderHash  
        };

        $scope.tabWDSF.regProcessing = true;
        RegistrationSrvc.WDSF(postData).then(
            function(data){
                $scope.regResponse = data;
                $scope.resultTableVisible = true;
                
                if (data && data.status == 1){
                    $scope.loadCountParticipantCompetitions('WDSF');
                }
                else{
                    $scope.tabWDSF.alert = UtilsSrvc.getAlert('Внимание!', data.message, 'error', true);
                }
                
                $scope.tabWDSF.regProcessing = false;
                console.log('reg success', data);
            },
            function(data){
                $scope.regResponse = data;
                $scope.resultTableVisible = true;
                $scope.tabWDSF.alert = UtilsSrvc.getAlert('Внимание!', data.message, 'error', true);
                console.log('reg error', data);
                $scope.tabWDSF.regProcessing = false;
            });  
    };



    // ===========================================================================================================================================
    // Tab OTHER                                                                                                                          Tab WDSF
    // ===========================================================================================================================================
    $scope.tabOTHER.select = function(){
        $scope.selectedTab = 'OTHER';
        $scope.competitionTable.refresh();
    };

    $scope.tabOTHER.formCouple.back = function(){
        if ($scope.tabOTHER.formCouple.btnRegistrationVisible){
            $scope.tabOTHER.formCouple.btnNextVisible = true;
            $scope.tabOTHER.formCouple.btnRegistrationVisible = false;
            $scope.tabOTHER.formCouple.disabled = false;
            $scope.regCompetitionsCount = 0;
            $scope.tabOTHER.formCouple.btnBackVisible = false;
        }
        else{
            $scope.tabUDSR.disabled = false;
            $scope.tabWDSF.disabled = false;
        }

        $scope.competitionTable.avialableMode = false;
        $scope.competitionTable.selectable = false;
        $scope.competitionTable.refresh();  
    };

    $scope.tabOTHER.formCouple.next = function(){
        $scope.tabOTHER.couple.man.dob = UtilsSrvc.getValidDate($scope.tabOTHER.couple.man.dob);
        $scope.tabOTHER.couple.woman.dob = UtilsSrvc.getValidDate($scope.tabOTHER.couple.woman.dob);
        
        if ($scope.tabOTHER.couple.man.dob == "" || $scope.tabOTHER.couple.woman.dob == ""){
            return;
        }

        $scope.tabOTHER.couple.key = ParticipantSrvc.getOtherCoupleKey($scope.tabOTHER.couple).replace(/\//g, "SLASH");
        $scope.loadCountParticipantCompetitions('OTHER');
        
        $scope.tabOTHER.formCouple.disabled = true;
        $scope.tabOTHER.formCouple.btnNextVisible = false;
        $scope.tabOTHER.formCouple.btnBackVisible = true;
        $scope.tabOTHER.formCouple.btnRegistrationVisible = true;
        
        $scope.competitionTable.selectable = true; 
        $scope.competitionTable.avialableMode = true;
        $scope.competitionTable.refresh();  
    };

    $scope.tabOTHER.formSingle.back = function(){
        if ($scope.tabOTHER.formSingle.btnRegistrationVisible){
            $scope.tabOTHER.formSingle.btnNextVisible = true;
            $scope.tabOTHER.formSingle.btnRegistrationVisible = false;
            $scope.tabOTHER.formSingle.disabled = false;
            $scope.regCompetitionsCount = 0;
            $scope.tabOTHER.formSingle.btnBackVisible = false;
        }
        else{
            $scope.tabUDSR.disabled = false;
            $scope.tabOTHER.disabled = false;
        }

        $scope.competitionTable.avialableMode = false;
        $scope.competitionTable.selectable = false;
        $scope.competitionTable.refresh();  
    };

    $scope.tabOTHER.formSingle.next = function(){
        $scope.tabOTHER.athlete.dob = UtilsSrvc.getValidDate($scope.tabOTHER.athlete.dob);
        
        if ($scope.tabOTHER.athlete.dob == ""){
            return;
        }

        $scope.tabOTHER.athlete.key = ParticipantSrvc.getOtherAthleteKey($scope.tabOTHER.athlete).replace(/\//g, "SLASH");
        $scope.loadCountParticipantCompetitions('OTHER');

        $scope.tabOTHER.formSingle.disabled = true;
        $scope.tabOTHER.formSingle.btnNextVisible = false;
        $scope.tabOTHER.formSingle.btnBackVisible = true;
        $scope.tabOTHER.formSingle.btnRegistrationVisible = true;
        
        $scope.competitionTable.selectable = true; 
        $scope.competitionTable.avialableMode = true;
        $scope.competitionTable.refresh();  
    };


    $scope.tabOTHER.registration = function(){
        var postData = {
            competitions: $scope.competitionTable.getSelectedIdArray(),
            couple: $scope.tabOTHER.couple || null,
            athlete: $scope.tabOTHER.athlete || null,
            recorderHash: $cookies.recorderHash  
        };

        RegistrationSrvc.OTHER(postData).then(
            function(data){
                $scope.regResponse = data;
                $scope.resultTableVisible = true;
                $scope.loadCountParticipantCompetitions('OTHER');
                console.log('reg success', data);
            },
            function(data){
                $scope.regResponse = data;
                $scope.resultTableVisible = true;
                $scope.tabOTHER.alert = UtilsSrvc.getAlert('Внимание!', data.message, 'error', true);
                console.log('reg error', data);
            });  
    };


    // ===========================================================================================================================================
    // Confirm Dialog                                                                                                               Confirm Dialog
    // ===========================================================================================================================================
    $scope.confirmDialog = {};

    $scope.confirmDialog.open = function(type, applyMethod){
        $scope.confirmDialog.data = {};  
        $scope.confirmDialog.data.type = type;
        $scope.confirmDialog.data.couple = angular.copy($scope['tab' + type].couple) || null;
        $scope.confirmDialog.data.athlete = angular.copy($scope['tab' + type].athlete) || null; 
        $scope.confirmDialog.apply = applyMethod;

        $('#ConfirmDialog').modal('show');
        $scope.confirmDialog.visible = true;
    };

    $scope.confirmDialog.close = function(){
        $('#ConfirmDialog').modal('hide');
        $scope.confirmDialog.visible = false;  
    };



    /// Load WDSF Countries
    $scope.loadCountries = function(){
        OtherSrvc.getCountries().then(
            function(data){
                $scope.countries = data.children;
            },
            function(data, status, headers, config){
                $scope.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });
    };


    $scope.getResultTableRow = function(res){
        var row = '';

        if (res.status == 1){
            row += $filter('localize')('Готово!') + ' ' + $filter('localize')('Регистрация выполнена.') + '\n' +
                   $filter('localize')('Группа') + ': ' + res.competition.name + '. ' + $filter('convertCacheDate')(res.competition.startDate, $filter('localize')('d MMMM y')) + '.';
            
            return row;
        }

        row += $filter('localize')('Ошибка!') + ' ' + $filter('localize')('Регистрация не выполнена.') + '\n' +
               $filter('localize')('Группа') + ': ' + res.competition.name + '. ' + $filter('convertCacheDate')(res.competition.startDate, $filter('localize')('d MMMM y')) + '.\n';
        
        if ($scope.selectedTab == 'WDSF'){
            // wdsf controller response
            var wcResponse = res.otherInfo;

            row += $filter('localize')('Сообщение') + ': ' + wcResponse.message + '\n';
            
            switch(wcResponse.code){
                // Conflict competitions for athlete
                case 2014:
                {
                    if (wcResponse.otherInfo && wcResponse.otherInfo.conflictCompetitions && wcResponse.otherInfo.conflictCompetitions.length != 0){
                        row += $filter('localize')('Обнаружены конфликтные группы для участника') + ' ' + (wcResponse.otherInfo.athlete ? wcResponse.otherInfo.athlete.surname + ' ' + wcResponse.otherInfo.athlete.name : '') + ':';
                       
                        for (var i = 0; i < res.otherInfo.otherInfo.conflictCompetitions.length; i++){
                            var conflictCmp = wcResponse.otherInfo.conflictCompetitions[i];
                            row += '\n • ' + conflictCmp.type + '. ' + 
                                             conflictCmp.discipline + '. ' + 
                                             conflictCmp.ageGroup + '. ' + 
                                             $filter('convertCacheDate')(conflictCmp.date, $filter('localize')('d MMMM y')) + '. ' + 
                                             $filter('localize')('Место проведения') + ' - ' + conflictCmp.country + ', ' +  conflictCmp.location + '.';
                        }
                    }
                    break;
                }
            }
        }    
        else {
            row += $filter('localize')('Сообщение') + ': ' + res.message + '\n';

            // Conflict competitions for UDSR athlete
            if (res.otherInfo.conflictCompetitions && res.otherInfo.conflictCompetitions.length != 0){
                row += $filter('localize')('Обнаружены конфликтные группы для участника') + ' ' + (res.otherInfo.athlete ? res.otherInfo.athlete.lastName + ' ' + res.otherInfo.athlete.firstName : '') + ':';
                
                for (var i = 0; i < res.otherInfo.conflictCompetitions.length; i++){
                    var conflictCmp = res.otherInfo.conflictCompetitions[i];
                    row += '\n • ' + conflictCmp.name + '. ' + 
                                     $filter('convertCacheDate')(conflictCmp.startDate, $filter('localize')('d MMMM y')) + '. ' + 
                                     $filter('localize')('Место проведения') + ' - ' + conflictCmp.tournament.location.country.name + ', ' + conflictCmp.tournament.location.cityName + '.';
                }
            }
        }

        return row;
    };

    $scope.init();  
    $scope.loadTournament($routeParams.tournamentId);
    $scope.loadCountries();
});  
]]></CSP>
</Export>
