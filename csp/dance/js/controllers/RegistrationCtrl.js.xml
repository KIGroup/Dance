<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="dance/js/controllers/RegistrationCtrl.js" application="/csp/dance/" default="1"><![CDATA[
'use strict';
//ddddddddddededs

/*===========================================================================================
Registration
===========================================================================================*/

controllersModule.controller('RegistrationCtrl', function($scope, $timeout, $location, $window, $routeParams, $filter, UtilsSrvc, OtherSrvc, TournamentSrvc, CompetitionSrvc, TournamentRankSrvc, TournamentStatusSrvc, CoupleSrvc){
	$scope.menu.pages.selected = {};
    $scope.menu.shortMenu = true;

    $scope.page = {};
    $scope.page.regUrl = {visible: false};
    $scope.page.genders = [{name: $filter('localize')('Мужской'), code: 'M'}, {name: $filter('localize')('Женский'), code: 'F'}];
    $scope.page.coupleOtherInfo = {};
    $scope.page.competitionTable = {};
    $scope.page.tournament = {};
    $scope.page.udsrCouple = {man: {},
                              woman: {}};

    $scope.page.wdsfCouple = {btnNextVisible: true,
	    					  man: {dob: '1990-10-10'},
                              woman: {dob: '1993-10-10'}}; 
                             
    $scope.page.newCouple = {btnNextVisible: true,
                             man: {},
                             woman: {},
                             type: 'Couple',
                             otherInfo:{country:{}}};  

    /*/========================================================== 
    $scope.page.newCouple.man.lastName = 'Петров';
    $scope.page.newCouple.man.firstName = 'Петр';
    $scope.page.newCouple.man.dob = '1990-10-20';

    $scope.page.newCouple.woman.lastName = 'Максимова';
    $scope.page.newCouple.woman.firstName = 'Лариса';
    $scope.page.newCouple.woman.dob = '1991-11-10';

    $scope.page.newCouple.otherInfo.country.id = 1;
    $scope.page.newCouple.otherInfo.city = 'Лондон';
    $scope.page.newCouple.otherInfo.club = 'Крает';
    $scope.page.newCouple.otherInfo.mainTrainer = 'Сикмонов Павел';    
    //==========================================================*/
	
 	if (!$scope.pageStore.registration) 
        $scope.pageStore.registration = {grid:{}};


    $scope.page.init = function(){
        //    
    	// Competition table
    	//
        $scope.page.competitionTable.columns = [
                          {name: 'Дата'             , sqlName: 'StartDate'               , isSorted: true , isSortable: false , isDown: true ,  isSearched: false ,  isSearchable: false, filter: 'date', captionStyle: {width: '130px'}},
                          {name: 'Время'            , sqlName: 'StartTime'               , isSorted: false, isSortable: false , isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {width: '70px'}},
                          {name: 'Название'         , sqlName: 'Name->Value'             , isSorted: false, isSortable: false , isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Программа'        , sqlName: 'Discipline->Name->Value' , isSorted: false, isSortable: false , isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Возрастная группа', sqlName: 'AgeCategory'             , isSorted: false, isSortable: false, isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Класс'            , sqlName: ''                        , isSorted: false, isSortable: false, isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Тип'              , sqlName: 'Type->Name->Value'       , isSorted: false, isSortable: false , isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {width: '50px'}},
                          {name: 'Цена'             , sqlName: 'Price'                   , isSorted: false, isSortable: false , isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {textAlign: 'right', width: '50px'}}];
        
        $scope.page.competitionTable.properties = [
                          {name:'startDate', filter: 'date', filterParam: $filter('localize')('d MMMM y')},
                          {name:'startTime'},
                          {name:'name'},
                          {name:'discipline.name'},
                          {name:'ageCategory.fullName', calculate: function(item){
                                                       item.ageCategory.fullName = item.ageCategory.name + ' (' + item.ageCategory.minAge + ' - ' + item.ageCategory.maxAge + ')';
                                                    }},
                          {name:'dancerClassesString', calculate: function(item){
                                                            item.dancerClassesString = '';
                                                            for(var i=0; i < item.dancerClasses.length; i++){
                                                                item.dancerClassesString = item.dancerClassesString + ', ' + item.dancerClasses[i].name;
                                                            }

                                                            item.dancerClassesString = item.dancerClassesString.substring(2, item.dancerClassesString.length);
                                                        }},
                          {name:'type.name'},
                          {name:'price', cellStyle: {textAlign: 'right'}}];

        $scope.page.competitionTable.pageSize = 1000; 
        $scope.page.competitionTable.pageCurr = 1;
        $scope.page.competitionTable.itemsTotal = 0;
        $scope.page.competitionTable.selectable = false;
        $scope.page.competitionTable.selectedItems = [];
        $scope.page.competitionTable.multiSelectMode = true;
        $scope.page.competitionTable.forciblyUpdate = 0;

        $scope.pageStore.registration.grid.tableShortView = $scope.pageStore.registration.grid.tableShortView == null ? true : $scope.pageStore.registration.grid.tableShortView;
        
        if ($scope.pageStore.registration.grid.tableShortView){
            $scope.page.competitionTable.setHiddenCoulumns(true);
        }
        else{
            $scope.page.competitionTable.setHiddenCoulumns(false);
        }  
    };


    /// Load Tournament by ID   
    $scope.page.loadTournament = function(id){
        TournamentSrvc.getById(id).then(
            function(data){
                $scope.page.tournament = data;

                if (data.tabOtherAllowed){
                    $scope.page.coupleType='new';
                    $scope.page.udsrCouple.tabActive = false;    
                	$scope.page.wdsfCouple.tabActive = false;
                	$scope.page.newCouple.tabActive = true;  
                }
                
                if (data.tabWDSFAllowed){ 
                    $scope.page.coupleType='wdsf';
                    $scope.page.udsrCouple.tabActive = false;    
                	$scope.page.wdsfCouple.tabActive = true;
                	$scope.page.newCouple.tabActive = false;    
                }

                if (data.tabUDSRAllowed){
                    $scope.page.coupleType='udsr';
                    $scope.page.udsrCouple.tabActive = true;     
                	$scope.page.wdsfCouple.tabActive = false;
                	$scope.page.newCouple.tabActive = false;
                }

                $scope.page.competitionTable.refresh();
                if ($scope.page.tournament.status.code != 'Registration')
                    $scope.page.tournamentAlert = UtilsSrvc.getAlert('Внимание!', 'Регистрация участников невозможна! Статус турнира - "' + $scope.page.tournament.status.name + '".', 'error', true);
            },
            function(data, status, headers, config){
                $scope.page.tournamentAlert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });
    };

    /// Load types of competition
    $scope.page.loadCompetitionTypes = function(){  
        $scope.page.competitionTable.types = [{code: 'Couple', name: $filter('localize')('Пара')}, {code: 'Solo', name: $filter('localize')('Соло')}];
    };
 
    /// Load All Competitions in Tournament  
    $scope.page.competitionTable.loadItems = function(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText){
        $scope.page.competitionTable.itemsStatus = $filter('localize')('Идет загрузка групп...');

        if ($scope.page.competitionTable.avialableMode){
            var couple = {};
            
            switch($scope.page.coupleType){
                case 'udsr':{
                    couple = {type: 'udsr', man: $scope.page.udsrCouple.man, woman: $scope.page.udsrCouple.woman};
                    break;
                }
                case 'wdsf':{
                    couple = {type: 'wdsf', man: $scope.page.wdsfCouple.man, woman: $scope.page.wdsfCouple.woman};    
                    break;
                }
                case 'new':{
                    couple = {type: 'new', isSolo: $scope.page.newCouple.type == 'Solo', man: $scope.page.newCouple.man, woman: $scope.page.newCouple.woman};
                    break;
                }
            }
        
            CompetitionSrvc.getAllAvialableForGrid(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, {couple: couple, tournamentId: $scope.page.tournament.id}).then(
                function(data){
                    data = data.children;
                    $scope.page.competitionTable.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                    $scope.page.competitionTable.itemsTotal = data.itemsTotal;
                    $scope.page.competitionTable.items = data.items; 
                    $scope.page.competitionTable.onSelect(null);

                    $scope.page.competitionTable.itemsStatus = data.items.length == 0 ? $filter('localize')('Нет доступных групп.') : '';
                },
                function(data, status, headers, config){
                    $scope.page.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
                    $scope.page.competitionTable.itemsStatus = $filter('localize')('Произошла ошибка при загрузке групп.');
                });
        }
        else{
            CompetitionSrvc.getAllForGrid(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, {coupleType: $scope.page.coupleType, tournamentId: $scope.page.tournament.id}).then(
                function(data){
    	            data = data.children;
                    $scope.page.competitionTable.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                    $scope.page.competitionTable.itemsTotal = data.itemsTotal;
                    $scope.page.competitionTable.items = data.items; 
                    $scope.page.competitionTable.caption = $filter('localize')('Все группы');

                    $scope.page.competitionTable.itemsStatus = data.items.length == 0 ? $filter('localize')('Нет доступных групп.') : '';
                },
                function(data, status, headers, config){
                    $scope.page.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
                    $scope.page.competitionTable.itemsStatus = $filter('localize')('Произошла ошибка при загрузке групп.');
                });
        }
    };

    $scope.page.competitionTable.setHiddenCoulumns = function(value){
        var indexes = [1,3,4,5,6];
        for(var n=0; n < indexes.length; n++){
            $scope.page.competitionTable.columns[indexes[n]].hidden = value;     
        }
    };

    // Select competition
    $scope.page.competitionTable.onSelect = function(item){
        $scope.page.competitionTable.caption = $filter('localize')('Доступные группы для регистрации.') + ' ' + $filter('localize')('Выбрано %1 из %2.')
                                               .replace(/%1/g, $scope.page.competitionTable.selectedItems.length)
                                               .replace(/%2/g, $scope.page.competitionTable.items.length);
                                               
    };

    /// Refresh competition table  
    $scope.page.competitionTable.refresh = function(){ 
    	$scope.page.competitionTable.forciblyUpdate++; 
    };
  
    /// Load WDSF Countries
    $scope.page.loadCountries = function(){
        OtherSrvc.getCountries().then(
            function(data){
                $scope.page.countries = data.children;
            },
            function(data, status, headers, config){
                $scope.page.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });
    };

    /// Load count of tournament competitons for couple 
    $scope.page.loadCoupleCompetitionsCount = function(tournamentId, coupleId){
        $scope.page.coupleOtherInfo.competitionsCount = 0;
        
        if (!tournamentId || !coupleId)
            return;

        CoupleSrvc.getCompetitionsCount(tournamentId, coupleId).then(
            function(data){
                $scope.page.coupleOtherInfo.competitionsCount = data.count;
            },
            function(data, status, headers, config){
                //$scope.page.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });
    }; 
   
    $scope.page.showCoupleGroups = function(tournamentId, coupleId){
        $location.path("/tournament/" + tournamentId + "/couple/" + coupleId + "/competitions"); 
    };


    $scope.page.openConfirmDlg = function(type, man, woman, otherInfo, regMethod){
        $scope.page.confirmData = {};  
        $scope.page.confirmData.type = type; 
    
        if (type == 'udsr'){
            $scope.page.confirmData.couple = {man: $scope.page.udsrCouple.man, 
                                              woman: $scope.page.udsrCouple.woman, 
                                              otherInfo: $scope.page.udsrCouple.otherInfo};        
        }
        else if (type == 'wdsf'){
            $scope.page.confirmData.couple = {man: $scope.page.wdsfCouple.man, 
                                              woman: $scope.page.wdsfCouple.woman, 
                                              otherInfo: $scope.page.wdsfCouple.otherInfo};        
        }
        else if (type == 'new'){
            $scope.page.confirmData.couple = {man: $scope.page.newCouple.man, 
                                              woman: $scope.page.newCouple.woman, 
                                              otherInfo: $scope.page.newCouple.otherInfo};        

            for(var i=0; i < $scope.page.countries.length; i++){
                if ($scope.page.countries[i].id == $scope.page.confirmData.couple.otherInfo.country.id){
                    $scope.page.confirmData.couple.otherInfo.country = $scope.page.countries[i];
                }
            }
        }

        $scope.page.confirmData.couple = {man: man, woman: woman, otherInfo: otherInfo};
        $scope.page.confirmData.register = regMethod;

        $('#ConfirmModal').modal('show');
        $scope.page.confirmModalVisible = true;
    };


    $scope.page.closeConfirmDlg = function(){
        $('#ConfirmModal').modal('hide');
        $scope.page.confirmModalVisible = false;  
    };


    ///==========================================================================================================================================================================
    /// UDSR COUPLE                                                                                                                                                   UDSR COUPLE 
    ///==========================================================================================================================================================================
    // Search couple by min    
    $scope.page.udsrCouple.search = function(manNum, womanNum){
        $scope.page.coupleOtherInfo.id = null;

        $scope.page.udsrCouple.processingImgVisible = true;
        $scope.page.udsrCouple.alert.visible = false;

        $scope.page.competitionTable.avialableMode = false;
        $scope.page.competitionTable.selectable = false;

        CoupleSrvc.getUDSRByNumbers(manNum, womanNum).then(
            function(data){
                $scope.page.udsrCouple.exists = true;
                $scope.page.coupleOtherInfo.id = data.id;
                $scope.page.udsrCouple.man = data.man;
                $scope.page.udsrCouple.woman = data.woman;
                $scope.page.udsrCouple.otherInfo = data.otherInfo

                $scope.page.wdsfCouple.tabDisabled = true;  
                $scope.page.newCouple.tabDisabled = true;  
         
                $scope.page.competitionTable.avialableMode = true;
                $scope.page.competitionTable.selectable = true;
                $scope.page.competitionTable.refresh();

                $scope.page.udsrCouple.processingImgVisible = false;

                $scope.page.loadCoupleCompetitionsCount($scope.page.tournament.id, $scope.page.coupleOtherInfo.id);               
            },
            function(data, status, headers, config){
                $scope.page.udsrCouple.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
                $scope.page.udsrCouple.processingImgVisible = false;
            });  
    };

    // Clear search form
    $scope.page.udsrCouple.clear = function(){
        $scope.page.coupleOtherInfo.id = null;
        
        $scope.form_udsrCouple.$setPristine(); 
        $scope.page.udsrCouple.exists = false;
        $scope.page.udsrCouple.man = {}; 
        $scope.page.udsrCouple.woman = {}; 
        $scope.page.udsrCouple.alert.visible=false;

        $scope.page.wdsfCouple.tabDisabled = false;  
        $scope.page.newCouple.tabDisabled = false;  
        
        $scope.page.competitionTable.avialableMode = false;
        $scope.page.competitionTable.selectable = false;
        $scope.page.competitionTable.selectedItems = [];
        $scope.page.competitionTable.refresh();    
    };

    // Registration USDR couple
    $scope.page.udsrCouple.register = function(){
        CoupleSrvc.registrationExisting({man: $scope.page.udsrCouple.man, woman: $scope.page.udsrCouple.woman, competitions: $scope.page.competitionTable.selectedItems}).then(
            function(data){
                //$scope.page.udsrCouple.alert = UtilsSrvc.getAlert('Готово!', 'Регистрация успешно завершена!', 'info', true);
            	//$scope.page.competitionTable.selectedItems = [];
            	//$scope.page.competitionTable.refresh();
                //$scope.page.loadCoupleCompetitionsCount($scope.page.tournament.id, $scope.page.coupleOtherInfo.id);
                //$timeout(function(){
                $scope.pageStore.tournamentPayment = {gridCompetitions: {}, showAlert: true};
                $scope.page.showCoupleGroups($scope.page.tournament.id, $scope.page.coupleOtherInfo.id);
                //}, 1500);
            },
            function(data, status, headers, config){
                $scope.page.udsrCouple.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });  
    };

    
    ///==========================================================================================================================================================================
    /// WDSF COUPLE                                                                                                                                                   WDSF COUPLE 
    ///==========================================================================================================================================================================
    // Search WDSF couple by min
    $scope.page.wdsfCouple.search = function(manNum, womanNum){
        $scope.page.coupleOtherInfo.id = null;
        
        $scope.page.wdsfCouple.processingImgVisible = true;
        $scope.page.wdsfCouple.alert.visible = false;
        
        $scope.page.competitionTable.avialableMode = false;
        $scope.page.competitionTable.selectable = false;

        CoupleSrvc.getWDSFByNumbers(manNum, womanNum).then(
            function(data){
                $scope.page.wdsfCouple.exists = true;
                $scope.page.wdsfCouple.btnClearVisible = true;
                $scope.page.coupleOtherInfo.id = data.id;
                $scope.page.wdsfCouple.man = data.man;
                $scope.page.wdsfCouple.woman = data.woman;
                $scope.page.wdsfCouple.otherInfo = data.otherInfo

                $scope.page.udsrCouple.tabDisabled = true;  
                $scope.page.newCouple.tabDisabled = true;

                //$scope.page.competitionTable.avialableMode = true;
                //$scope.page.competitionTable.selectable = true;
                //$scope.page.competitionTable.refresh();
                
                $scope.page.wdsfCouple.processingImgVisible = false;  

                $scope.page.loadCoupleCompetitionsCount($scope.page.tournament.id, $scope.page.coupleOtherInfo.id);
            },
            function(data, status, headers, config){
                $scope.page.wdsfCouple.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
                $scope.page.wdsfCouple.processingImgVisible = false;
            });  
    };

    // Next button click
    $scope.page.wdsfCouple.next = function(){
        $scope.page.wdsfCouple.man.dob = UtilsSrvc.getValidDate($scope.page.wdsfCouple.man.dob);
        $scope.page.wdsfCouple.woman.dob = UtilsSrvc.getValidDate($scope.page.wdsfCouple.woman.dob);
        
        if ($scope.page.wdsfCouple.man.id == $scope.page.wdsfCouple.woman.id){
            $scope.page.wdsfCouple.woman.dob = $scope.page.wdsfCouple.man.dob;
            
            if ($scope.page.wdsfCouple.man.dob == "") 
                return;   
        }
        else if ($scope.page.wdsfCouple.man.dob == "" || $scope.page.wdsfCouple.woman.dob == ""){
            return;
        }

        $scope.page.wdsfCouple.fieldsDisabled = true;
        $scope.page.wdsfCouple.btnClearVisible = false;
        $scope.page.wdsfCouple.btnBackVisible = true;
        $scope.page.wdsfCouple.btnNextVisible = false;
        $scope.page.wdsfCouple.btnRegisterVisible = true;

        $scope.page.competitionTable.avialableMode = true;
        $scope.page.competitionTable.selectable = true;
        $scope.page.competitionTable.refresh();
    };

    // Clear WDSF search form
    $scope.page.wdsfCouple.clear = function(){
        $scope.page.coupleOtherInfo.id = null;

        $scope.form_wdsfCouple.$setPristine(); 
        $scope.page.wdsfCouple.exists = false;
        $scope.page.wdsfCouple.man = {}; 
        $scope.page.wdsfCouple.woman = {}; 
        $scope.page.wdsfCouple.alert.visible = false;

        $scope.page.udsrCouple.tabDisabled = false;  
        $scope.page.newCouple.tabDisabled = false;

        $scope.page.competitionTable.avialableMode = false;
        $scope.page.competitionTable.selectable = false;
        $scope.page.competitionTable.selectedItems = [];
        $scope.page.competitionTable.refresh();  
    };

    // Back button click
    $scope.page.wdsfCouple.back = function(){
        $scope.page.wdsfCouple.fieldsDisabled = false;
        $scope.page.wdsfCouple.btnClearVisible = true;
        $scope.page.wdsfCouple.btnBackVisible = false;
        $scope.page.wdsfCouple.btnNextVisible = true;
        $scope.page.wdsfCouple.btnRegisterVisible = false;

        $scope.page.competitionTable.avialableMode = false;
        $scope.page.competitionTable.selectable = false;
        $scope.page.competitionTable.selectedItems = [];
        $scope.page.competitionTable.refresh();
    };


    // Registration WDSF couple
    $scope.page.wdsfCouple.register = function(){
        CoupleSrvc.registrationExisting({type: $scope.page.coupleType,
                                         man: $scope.page.wdsfCouple.man, 
                                         woman: $scope.page.wdsfCouple.woman, 
                                         otherInfo: $scope.page.wdsfCouple.otherInfo, 
                                         competitions: $scope.page.competitionTable.selectedItems}).then(
            function(data){
                //$scope.page.wdsfCouple.alert = UtilsSrvc.getAlert('Готово!', 'Registration was successful!', 'info', true);
                //$scope.page.competitionTable.selectedItems=[];
                //$scope.page.competitionTable.refresh();
                //$scope.page.loadCoupleCompetitionsCount($scope.page.tournament.id, $scope.page.coupleOtherInfo.id); 
                
                //$timeout(function(){
                $scope.pageStore.tournamentPayment = {gridCompetitions: {}, showAlert: true};    
                $scope.page.showCoupleGroups($scope.page.tournament.id, $scope.page.coupleOtherInfo.id);
                //}, 1500);
            },
            function(data, status, headers, config){
                $scope.page.wdsfCouple.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });  
    };
 
    ///==========================================================================================================================================================================
    /// NEW COUPLE                                                                                                                                                     NEW COUPLE 
    ///==========================================================================================================================================================================
    // Next button click
    $scope.page.newCouple.next = function(){
        $scope.page.newCouple.man.dob = UtilsSrvc.getValidDate($scope.page.newCouple.man.dob);
        $scope.page.newCouple.woman.dob = UtilsSrvc.getValidDate($scope.page.newCouple.woman.dob);
        if ($scope.page.newCouple.man.dob == '' || ($scope.page.newCouple.woman.dob == '' && $scope.page.newCouple.type != 'Solo'))
            return;

        $scope.page.udsrCouple.tabDisabled = true;
        $scope.page.wdsfCouple.tabDisabled = true;
        
        $scope.page.newCouple.fieldsDisabled = true;
        $scope.page.newCouple.btnBackVisible = true;
        $scope.page.newCouple.btnNextVisible = false;
        $scope.page.newCouple.btnRegisterVisible = true;

        $scope.page.competitionTable.avialableMode = true;
        $scope.page.competitionTable.selectable = true;
        $scope.page.competitionTable.refresh();
    };

    // Back button click
    $scope.page.newCouple.back = function(){
        $scope.page.udsrCouple.tabDisabled = false; 
        $scope.page.wdsfCouple.tabDisabled = false;

        $scope.page.newCouple.fieldsDisabled = false;
        $scope.page.newCouple.btnBackVisible = false;
        $scope.page.newCouple.btnNextVisible = true;
        $scope.page.newCouple.btnRegisterVisible = false;

        $scope.page.competitionTable.avialableMode = false;
        $scope.page.competitionTable.selectable = false;
        $scope.page.competitionTable.selectedItems = [];
        $scope.page.competitionTable.refresh();
    };

    // Registration New Couple
    $scope.page.newCouple.register = function(){
        $scope.page.newCouple.man.dob = UtilsSrvc.getValidDate($scope.page.newCouple.man.dob);
        $scope.page.newCouple.woman.dob = UtilsSrvc.getValidDate($scope.page.newCouple.woman.dob);
        if ($scope.page.newCouple.man.dob == '' || ($scope.page.newCouple.woman.dob == '' && $scope.page.newCouple.type != 'Solo'))
            return; 

        $scope.page.newCouple.competitions = $scope.page.competitionTable.selectedItems;

        CoupleSrvc.registrationNew({tournamentId: $scope.page.tournament.id, 
                                    isSolo: $scope.page.newCouple.type == 'Solo',
                                    soloGender: $scope.page.newCouple.soloGender,
                                    man: $scope.page.newCouple.man, 
                                    woman: $scope.page.newCouple.woman,  
                                    otherInfo: $scope.page.newCouple.otherInfo,
                                    competitions: $scope.page.competitionTable.selectedItems}).then(
            function(data){
                $window.document.forms["danceplatOtherPay"].submit();  
            },
            function(data, status, headers, config){
                $scope.page.newCouple.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });  
    };


    $scope.page.init();
    $scope.page.loadCountries();
    $scope.page.loadTournament($routeParams.tournamentId);
    $scope.page.loadCompetitionTypes();
});

]]></CSP>
</Export>
