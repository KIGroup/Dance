<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="dance/js/controllers/TournamentCompetitionsCtrl.js" application="/csp/dance/" default="1"><![CDATA[
'use strict';
//ddc вdd d

/*===========================================================================================
Tournament Competitions
===========================================================================================*/

controllersModule.controller('TournamentCompetitionsCtrl', function($scope, $interval, $routeParams, $timeout, $location, $filter, UtilsSrvc, LocationSrvc, TournamentSrvc, CompetitionSrvc, TournamentRankSrvc, TournamentStatusSrvc){
	$scope.menu.pages.selected = {};

	$scope.page = {};
    $scope.page.competitionTable = {filterDate: ''};
    
    $scope.recorderHash = $routeParams.recorderHash || null;
    $scope.locationSrvc = LocationSrvc; 
    
    if (!$scope.pageStore.tournamentDetails) 
    	$scope.pageStore.tournamentDetails = {gridCompetitions:{filterDate: '', hideNumbersColumn: true}};

	var intervalForTable = null;
 
    $scope.page.init = function(){
        // 
    	// Competition table
    	//
        $scope.page.competitionTable.columns = [
        				  {name: '#'                 , sqlName: '%EXACT(idExternal)'      , isSorted: true , isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false, filter: 'date', captionStyle: {width: '20px'}},
                          {name: 'Дата'              , sqlName: 'StartDate'               , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false, filter: 'date', captionStyle: {width: '130px'}},
                          {name: 'Время'             , sqlName: 'StartTime'               , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {width: '70px'}},
                          {name: 'Название'          , sqlName: 'Name->Value'             , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Программа'         , sqlName: 'Discipline->Name->Value' , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Возр. группа' , sqlName: 'AgeCategory'             , isSorted: false, isSortable: true, isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Класс'             , sqlName: ''                        , isSorted: false, isSortable: false, isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Цена'              , sqlName: 'Price'                   , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {textAlign: 'right', width: '50px'}},
                          {name: 'Участники'         , sqlName: 'ParticipantsCount'       , isSorted: false, isSortable: true, isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {textAlign: 'center', width: '100px'}},
                          {name: 'Оплачено'          , sqlName: 'PaymentsCount', isSorted: false, isSortable: true, isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {textAlign: 'center', width: '100px'}}];
        
        $scope.page.competitionTable.properties = [
        				  {name:'idExternal'},
                          {name:'startDate', filter: 'date', filterParam: $filter('localize')('d MMMM y')},
                          {name:'startTime'},
                          {name:'fullName', 
                            calculate: function(item){
                                item.fullName = item.name;
                            }},   
                          {name:'discipline.name'},
                          {name:'ageCategory.name'},
                          {name:'dancerClassesString', 
                                                    calculate: function(item){
                                                            item.dancerClassesString = '';
                                                            for(var i=0; i < item.dancerClasses.length; i++){
                                                                item.dancerClassesString = item.dancerClassesString + ', ' + item.dancerClasses[i].name;
                                                            }

                                                            item.dancerClassesString = item.dancerClassesString.substring(2, item.dancerClassesString.length);
                                                    }},
                          {name:'price', cellStyle: {textAlign: 'right'}},
                          {name:'participantsCountString', cellStyle: {textAlign: 'center'}, cellSelectable: true, cellTitle: $filter('localize')('Открыть список участников группы'),  
                                                    calculate: function(item){
                                                        item.participantsCountString = item.participantsCount + ' »';
                                                    },
                                                    getCssClass: function(item){ 
                                                        return 'cellLink';
                                                    },
                                                    onClickCell: function(id){
                                                        LocationSrvc.goTo(":recorderHash/competition/" + id +"/participants", $scope.recorderHash); 
                                                    }},
                          {name:'paymentsCount', cellStyle: {textAlign: 'center'}, cellSelectable: true, cellTitle: $filter('localize')('Количество оплативших участников')}];  

        $scope.page.competitionTable.pageSize = 500;
        $scope.page.competitionTable.pageCurr = 1;
        $scope.page.competitionTable.itemsTotal = 0;
        $scope.page.competitionTable.selectedItems = [];
        $scope.page.competitionTable.multiSelectMode = false;
        $scope.page.competitionTable.forciblyUpdate = 0;
        $scope.page.competitionTable.refresh();

        $scope.pageStore.tournamentDetails.gridCompetitions.tableShortView = $scope.pageStore.tournamentDetails.gridCompetitions.tableShortView == null ? true : $scope.pageStore.tournamentDetails.gridCompetitions.tableShortView;
        
        if ($scope.pageStore.tournamentDetails.gridCompetitions.tableShortView){
            $scope.page.competitionTable.setHiddenCoulumns(true);
        }
        else{      
            $scope.page.competitionTable.setHiddenCoulumns(false);
        }    
    };


    // 
    $scope.page.competitionTable.loadItems = function(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText){
        $scope.page.competitionTable.itemsStatus = $filter('localize')('Идет загрузка данных...');
        
        var convertParams = {
	        loadParticipantsCount: true,
	        loadPaymentsCount: true,
            loadWDSF: true 
	    };
	    
        if ($scope.pageStore.tournamentDetails.gridCompetitions.tableShortView){
	       	$('#divTypeOfView').hide();  
        }
        else{
	        $('#divTableCmpButtons,#divTableCmpStatus').css('width', '100%');
	        convertParams.loadTournament = true;
	        convertParams.loadDiscipline = true;
	        convertParams.loadAgeCategory = true;
	        convertParams.loadType = true;
            convertParams.loadDancerClasses = true;
	        convertParams.tournamentParams = {};
        }
        
        CompetitionSrvc.getAllForGrid(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, {
	        					date: $scope.pageStore.tournamentDetails.gridCompetitions.filterDate, 
	        					tournamentId: $routeParams.id,
	        					convertParams: convertParams
	        				}).then(
            function(data){
	            data = data.children;
                $scope.page.competitionTable.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                $scope.page.competitionTable.itemsTotal = data.itemsTotal;
                $scope.page.competitionTable.items = data.items;

                if ($scope.page.competitionTable.selectedItems && $scope.page.competitionTable.items && $scope.page.competitionTable.selectedItems.length == 0 && $scope.page.competitionTable.items.length != 0){
                    var selected = $scope.page.competitionTable.items[0];
                    selected.rowClass = 'success';
                    $scope.page.competitionTable.selectedItems = [selected];
                }

                $scope.page.competitionTable.itemsStatus = data.itemsTotal == 0 ? $filter('localize')('Нет данных.') : '';
				
				if ($scope.pageStore.tournamentDetails.gridCompetitions.tableShortView){
					$interval.cancel(intervalForTable);
					intervalForTable = $interval(function() {
	      				console.log('interval!');
	      				var tableWidth = $('#tableCmp').css('width');
	                    if (tableWidth != '0px'){
	                        $('#divTableCmpButtons,#divTableCmpStatus').css('width', tableWidth);
	                        $('#divTypeOfView').show();
	                   	}
	      			}, 100, 50);
                }   
            },
            function(data){
                $scope.page.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
                $scope.page.competitionTable.itemsStatus = $filter('localize')('Произошла ошибка при загрузке данных.');
            });
    };

    $scope.page.competitionTable.setHiddenCoulumns = function(value){
        var indexes = [2,4,5,6,7];
        for(var n=0; n < indexes.length; n++){
            $scope.page.competitionTable.columns[indexes[n]].hidden = value;     
        }
        
        if (value){
        	$scope.pageStore.tournamentDetails.gridStyle = {width: 'initial'};
        }
        else{
	        $scope.pageStore.tournamentDetails.gridStyle = {width: '100%'};
        }

		$scope.pageStore.tournamentDetails.gridCompetitions.tableShortView = value;
        $scope.page.competitionTable.refresh();
    };
    
    $scope.page.competitionTable.onSelect = function(item){
        if (!item)  return;
    };

    $scope.page.competitionTable.onSelectCell = function(item, property){ 
        if (!item) return;

        property.onClickCell(item.id);
    };
 
    $scope.page.competitionTable.refresh = function(){ 
        $scope.page.competitionTable.forciblyUpdate++; 
    };

	$scope.page.competitionTable.import = function(){
		$location.path("/tournament/" + $routeParams.id + "/importcompetitions"); 
	};

    $scope.page.competitionTable.add = function(){
        $location.path("/tournament/" + $routeParams.id + "/competition"); 
    };

    $scope.page.competitionTable.edit = function(item){
        $location.path("/tournament/" + $routeParams.id + "/competition/" + item.id); 
    };

    $scope.page.competitionTable.remove = function(item){
         alert('remove competition');
    };
    
    $scope.page.competitionTable.open = function(item){
        $location.path("/competition/" + item.id + "/participants"); 
    };

    /// 
    $scope.page.competitionTable.loadDates = function(tournamentId){
        CompetitionSrvc.getDates(tournamentId).then(
            function(data){
                $scope.pageStore.tournamentDetails.gridCompetitions.filterDate = '';
                $scope.page.competitionTable.dates = data.children;
            },
            function(data, status, headers, config){
                $scope.page.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });
    };

    $scope.page.competitionTable.changeDateFilter = function(date){
        $scope.pageStore.tournamentDetails.gridCompetitions.filterDate = date;
        $scope.page.competitionTable.refresh();
    };  

    /// Load Tournament by ID
    $scope.page.loadTournament = function(id){
        TournamentSrvc.getById(id, "?loadFullName=1&loadParticipantsCount=1&loadParticipantsUniqueCount=1&loadPaymentsCount=1").then(
            function(data){
                $scope.page.tournament = data;
            },
            function(data, status, headers, config){
                $scope.page.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });
    };

    /// Load participants count for tournament
    $scope.page.loadParticipantsCount = function(id){
        TournamentSrvc.getParticipantsCountById(id).then(
            function(data){
                $scope.page.participantsInfo = {total: data.participantsCount, unique: data.participantsUniqueCount};
            },
            function(data, status, headers, config){
                $scope.page.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });
    };

    $scope.page.init();
    $scope.page.loadTournament($routeParams.id);
    $scope.page.competitionTable.loadDates($routeParams.id);
    
    $scope.$on('$destroy', function() {
      	// Make sure that the interval is destroyed too
      	$interval.cancel(intervalForTable);
    });
});

]]></CSP>
</Export>
