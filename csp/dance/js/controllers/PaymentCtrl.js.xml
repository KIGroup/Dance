<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="dance/js/controllers/PaymentCtrl.js" application="/csp/dance/" default="1"><![CDATA[
'use strict';
//ddcddddd

/*===========================================================================================
Payment
===========================================================================================*/

controllersModule.controller('PaymentCtrl', function($scope, $routeParams, $location, $filter, UtilsSrvc, CoupleSrvc, TournamentSrvc, ParticipantSrvc){
	//$scope.menu.selectMenu('tournaments');;

	$scope.page = {};
    $scope.page.competitionTable = {};
    $scope.page.competitionList = [];

 	if (!$scope.pageStore.tournamentPayment) 
        $scope.pageStore.tournamentPayment = {gridCompetitions:{}};

    
    $scope.page.init = function(){
        if ($scope.pageStore.tournamentPayment.showAlert){
            $scope.page.registrationAlert = UtilsSrvc.getAlert('Готово!', 'Регистрация прошла успешно, на данной странице отображены все группы пары/участника в турнире.', 'info', true);
            $scope.pageStore.tournamentPayment.showAlert = false;
        }


        // 
    	// Competition table
    	//
        $scope.page.competitionTable.columns = [
                          {name: 'Date'              , sqlName: 'Competition->StartDate'               , isSorted: true , isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false, filter: 'date', captionStyle: {width: '130px'}},
                          {name: 'Time'              , sqlName: 'Competition->StartTime'               , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {width: '60px'}},
                          {name: 'Name'              , sqlName: 'Competition->Name'                    , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Discipline'        , sqlName: 'Competition->Discipline->Name->Value' , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Age category'      , sqlName: 'Competition->AgeCategory'             , isSorted: false, isSortable: true,  isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Class'             , sqlName: ''                                     , isSorted: false, isSortable: false, isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Type'              , sqlName: 'Competition->Type->Name->Value'       , isSorted: false, isSortable: false, isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {width: '70px'}},
                          {name: 'Price'             , sqlName: 'Competition->Price'                   , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {textAlign: 'right', width: '60px'}},
                          {name: 'Status'            , sqlName: 'PaymentStatus'                        , isSorted: false, isSortable: false, isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {textAlign: 'center', width: '110px'}}];
        
        $scope.page.competitionTable.properties = [
        				  {name:'competition.startDate', filter: 'date', filterParam: $filter('localize')('d MMMM y')},
                          {name:'competition.startTime'},
                          {name:'competition.name'},
                          {name:'competition.discipline.name'},
                          {name:'competition.ageCategory.name'},
                          {name:'competition.dancerClassesString', calculate: function(item){
                                                                        item.competition.dancerClassesString = '';
                                                                        for(var i=0; i < item.competition.dancerClasses.length; i++){
                                                                            item.competition.dancerClassesString = item.competition.dancerClassesString + ', ' + item.competition.dancerClasses[i].name;
                                                                        }

                                                                        item.competition.dancerClassesString = item.competition.dancerClassesString.substring(2, item.competition.dancerClassesString.length);
                                                                    }},
                          {name:'competition.type.name'},
                          {name:'competition.price', cellStyle: {textAlign: 'right'}},
                          {name:'paymentStatusString', cellStyle: {textAlign: 'center'}, calculate: function(item){
                                                            switch(item.paymentStatus){
                                                                case 'none':
                                                                    item.paymentStatusString = $filter('localize')('Не оплачено');
                                                                    break;
                                                                case 'pay':
                                                                    item.paymentStatusString = $filter('localize')('Оплачено');
                                                                    break;
                                                                case 'cancel':
                                                                    item.paymentStatusString = $filter('localize')('Отменен');
                                                                    break;
                                                            }
                                                      }}];  

        $scope.page.competitionTable.pageSize = 300;
        $scope.page.competitionTable.pageCurr = 1;
        $scope.page.competitionTable.itemsTotal = 0;
        $scope.page.competitionTable.selectedItems = [];
        $scope.page.competitionTable.multiSelectMode = true;
        $scope.page.competitionTable.forciblyUpdate = 0;
      
        $scope.page.competitionTable.refresh();

        $scope.pageStore.tournamentPayment.gridCompetitions.tableShortView = $scope.pageStore.tournamentPayment.gridCompetitions.tableShortView == null ? true : $scope.pageStore.tournamentPayment.gridCompetitions.tableShortView;
        
        if ($scope.pageStore.tournamentPayment.gridCompetitions.tableShortView){
            $scope.page.competitionTable.setHiddenCoulumns(true);
        }
        else{
            $scope.page.competitionTable.setHiddenCoulumns(false);
        }    
    };


    //  
    $scope.page.competitionTable.loadItems = function(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText){
        ParticipantSrvc.getAllForCouple($routeParams.tournamentId, $routeParams.coupleId).then(
            function(data){
	            $scope.page.competitionTable.items = data.children;
				$scope.page.competitionTable.itemsTotal = data.children.length;
				/*
                if ($scope.page.competitionTable.selectedItems && $scope.page.competitionTable.items && $scope.page.competitionTable.selectedItems.length == 0 && $scope.page.competitionTable.items.length != 0){
                    for(var i=0; i < data.items.length; i++){
                        data.items[i].rowClass = 'success';
                    	$scope.page.competitionTable.selectedItems.push(data.items[i]);
                    }
                }*/
            }, 
            function(data){
                $scope.page.alert = UtilsSrvc.getAlert('Внимание!', data, 'error', true);
            });
    };

    $scope.page.competitionTable.setHiddenCoulumns = function(value){
        var indexes = [1,3,4,5,6];
        for(var n=0; n < indexes.length; n++){
            $scope.page.competitionTable.columns[indexes[n]].hidden = value;     
        }
    };

    $scope.page.competitionTable.onSelect = function(item){
        $scope.page.competitionList = [];
        
        for(var i=0; i < $scope.page.competitionTable.selectedItems.length; i++){
            $scope.page.competitionList.push($scope.page.competitionTable.selectedItems[i].competition);
        }
    };
 
    $scope.page.competitionTable.refresh = function(){ 
        $scope.page.competitionTable.forciblyUpdate++; 
    };

    /// Load Tournament by ID
    $scope.page.loadTournament = function(id){
        TournamentSrvc.getById(id).then(
            function(data){
                $scope.page.tournament = data;
            },
            function(data, status, headers, config){
                $scope.page.alert = UtilsSrvc.getAlert('Attention!', data, 'error', true);
            });
    };
 
    /// Load Couple by ID 
    $scope.page.loadCouple = function(id){
        CoupleSrvc.getById(id).then(
            function(data){
                $scope.page.couple = data;
            },
            function(data, status, headers, config){
                $scope.page.alert = UtilsSrvc.getAlert('Attention!', data, 'error', true);
            });
    };

    $scope.page.init();
    $scope.page.loadTournament($routeParams.tournamentId);
    $scope.page.loadCouple($routeParams.coupleId);
});

]]></CSP>
</Export>
