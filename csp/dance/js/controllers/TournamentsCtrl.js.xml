<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<CSP name="dance/js/controllers/TournamentsCtrl.js" application="/csp/dance/" default="1"><![CDATA[
'use strict';
//-d

/*===========================================================================================

===========================================================================================*/

controllersModule.controller('TournamentsCtrl', function($scope, $location, $filter, UtilsSrvc, TournamentSrvc, CompetitionSrvc, TournamentRankSrvc, TournamentStatusSrvc){
	//$scope.menu.selectMenu('tournaments');;

	$scope.page = {};
    $scope.page.tournamentTable = {participantsInfo:{}};
    $scope.page.competitionTable = {filterDate: ''};

 	if (!$scope.pageStore.tournaments) $scope.pageStore.tournaments = {gridTournaments:{}, gridCompetitions:{filterDate: ''}};

    
    $scope.page.init = function(){
    	//
    	// Tournament table
    	//
        $scope.page.tournamentTable.columns = [
                          {name: 'Name'              , sqlName: 'Name->Value'         , isSorted: false, isSortable: true,  isDown: true ,  isSearched: true,  isSearchable: true},
                          {name: 'Start date'        , sqlName: 'StartDate'           , isSorted: true , isSortable: true,  isDown: false,  isSearched: false, isSearchable: false, filter: 'date'},
                          {name: 'End date'          , sqlName: 'EndDate'             , isSorted: false, isSortable: true,  isDown: true ,  isSearched: false, isSearchable: false, filter: 'date'},
                          {name: 'Rank'              , sqlName: 'TRank->Name->Value'  , isSorted: false, isSortable: true,  isDown: true ,  isSearched: false, isSearchable: false},
                          {name: 'Status'            , sqlName: 'TStatus->Name->Value', isSorted: false, isSortable: true,  isDown: true ,  isSearched: false, isSearchable: false},
                          {name: 'Total competitions', sqlName: 'CompetitionsCount'   , isSorted: false, isSortable: true,  isDown: true ,  isSearched: false, isSearchable: false, captionStyle: {textAlign: 'center'}},
                          {name: 'Total participants', sqlName: 'ParticipantsCount'   , isSorted: false, isSortable: true,  isDown: true ,  isSearched: false, isSearchable: false, captionStyle: {textAlign: 'center'}},
                          {name: 'Registration'      , sqlName: ''                    , isSorted: false, isSortable: false, isDown: true ,  isSearched: false, isSearchable: false, captionStyle: {textAlign: 'center'}}];
        
        $scope.page.tournamentTable.properties = [
        				  {name:'name'}, 
                          {name:'startDate', filter: 'date', filterParam: $filter('localize')('d MMMM y')},
                          {name:'endDate'  , filter: 'date', filterParam: $filter('localize')('d MMMM y')},
                          {name:'rank.name'},
                          {name:'status.name'},
                          {name:'competitionsCountString', cellStyle: {textAlign: 'center'}, cellSelectable: true, cellTitle: $filter('localize')('Watch participants list'),
                                                calculate: function(item){
                                                    item.competitionsCountString = item.competitionsCount + ' »';
                                                }, 
                                                getCssClass: function(item){ 
                                                    return 'cellLink';
                                                },  
                                                onClickCell: function(id){
                                                    $location.path("/tournament/" + id +"/competitions"); 
                                                }},
                          {name:'participantsCountString', cellStyle: {textAlign: 'center'}, cellSelectable: true, cellTitle: $filter('localize')('Watch competitions list'),
                                                calculate: function(item){
                                                    item.participantsCountString = item.participantsCount + ' »';
                                                },
                                                getCssClass: function(item){ 
                                                    return 'cellLink';
                                                },
                                                onClickCell: function(id){
                                                    $location.path("/tournament/" + id +"/participants"); 
                                                }},
                          {name:'registration', cellStyle: {textAlign: 'center'}, cellSelectable: true, cellTitle: $filter('localize')('Register'),
                                                getCssClass: function(item){ 
                                                    return 'cellLink';
                                                }, 
                                                calculate: function(item){
                                                    item.registration = $filter('localize')('Check in »');
                                                },
                                                onClickCell: function(id){
                                                    $location.path("/tournament/" + id +"/registration"); 
                                                }}];

        $scope.page.tournamentTable.pageSize = UtilsSrvc.getPropertyValue($scope.pageStore, 'tournaments.gridTournaments.pageSize', 10);
        $scope.page.tournamentTable.pageCurr = UtilsSrvc.getPropertyValue($scope.pageStore, 'tournaments.gridTournaments.pageCurr', 1);
        $scope.page.tournamentTable.itemsTotal = 0;
        $scope.page.tournamentTable.selectedItems = [];
        $scope.page.tournamentTable.multiSelectMode = false;
        $scope.page.tournamentTable.forciblyUpdate = 0;
        $scope.page.tournamentTable.refresh();

 
        // 
    	// Competition table
    	//
        $scope.page.competitionTable.columns = [
                          {name: 'Date'              , sqlName: 'StartDate'               , isSorted: true , isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false, filter: 'date'},
                          {name: 'Time'              , sqlName: 'StartTime'               , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Discipline'        , sqlName: 'Discipline->Name->Value' , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Age category'      , sqlName: 'AgeCategory'             , isSorted: false, isSortable: false, isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Class'             , sqlName: ''                        , isSorted: false, isSortable: false, isDown: true ,  isSearched: false ,  isSearchable: false},
                          {name: 'Price'             , sqlName: 'Price'                   , isSorted: false, isSortable: true , isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {textAlign: 'right'}},
                          {name: 'Total participants', sqlName: 'ParticipantsCount'       , isSorted: false, isSortable: false, isDown: true ,  isSearched: false ,  isSearchable: false, captionStyle: {textAlign: 'center'}}];
        
        $scope.page.competitionTable.properties = [
        				  {name:'startDate', filter: 'date', filterParam: $filter('localize')('d MMMM y')},
                          {name:'startTime'},
                          {name:'discipline.name'},
                          {name:'ageCategory.name'},
                          {name:'dancerClassesString', calculate: function(item){
                                                            item.dancerClassesString = '';
                                                            for(var i=0; i < item.dancerClasses.length; i++){
                                                                item.dancerClassesString = item.dancerClassesString + ', ' + item.dancerClasses[i].name;
                                                            }

                                                            item.dancerClassesString = item.dancerClassesString.substring(2, item.dancerClassesString.length);
                                                        }},
                          {name:'price', cellStyle: {textAlign: 'right'}},
                          {name:'participantsCountString', cellStyle: {textAlign: 'center'}, cellSelectable: true, cellTitle: $filter('localize')('Watch participants list'), 
                                                    calculate: function(item){
                                                        item.participantsCountString = item.participantsCount + ' »';
                                                    },
                                                    getCssClass: function(item){ 
                                                        return 'cellLink';
                                                    },
                                                    onClickCell: function(id){
                                                        $location.path("/competition/" + id +"/participants"); 
                                                    }}]; 

        $scope.page.competitionTable.pageSize = UtilsSrvc.getPropertyValue($scope.pageStore, 'tournaments.gridCompetition.pageSize', 250);
        $scope.page.competitionTable.pageCurr = UtilsSrvc.getPropertyValue($scope.pageStore, 'tournaments.gridCompetition.pageCurr', 1);
        $scope.page.competitionTable.itemsTotal = 0;
        $scope.page.competitionTable.selectedItems = [];
        $scope.page.competitionTable.multiSelectMode = false;
        $scope.page.competitionTable.forciblyUpdate = 0;
    };


    // 
    $scope.page.tournamentTable.loadItems = function(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText){
        TournamentSrvc.getAllForGrid(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, {rankId: $scope.pageStore.tournaments.gridTournaments.filterRankId, statusId: $scope.pageStore.tournaments.gridTournaments.filterStatusId}).then(
            function(data){
	            data = data.children;
                $scope.page.tournamentTable.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                $scope.page.tournamentTable.itemsTotal = data.itemsTotal;
                $scope.page.tournamentTable.items = data.items;

                if ($scope.page.tournamentTable.selectedItems && $scope.page.tournamentTable.items && $scope.page.tournamentTable.selectedItems.length == 0 && $scope.page.tournamentTable.items.length != 0){
                    var selected = $scope.page.tournamentTable.items[0];

                    if ($scope.pageStore.tournaments.gridTournaments.selectedId){
                        for(var i=0; i < data.items.length; i++){
                            if ($scope.pageStore.tournaments.gridTournaments.selectedId == data.items[i].id){
                                var selected = data.items[i];
                                break;                                
                            }
                        }   
                    } 

                    selected.rowClass = 'info';
                    $scope.page.tournamentTable.selectedItems = [selected]; 
                    $scope.page.tournamentTable.onSelect(selected);
                	console.log('tournament found');
                }
				else{
					console.log('tournament not found');
               		
				}
            },
            function(data){
                $scope.page.alert = UtilsSrvc.getAlert('Attention!', data, 'error', true);
            });
    };

    $scope.page.tournamentTable.refresh = function(){ 
        $scope.page.tournamentTable.forciblyUpdate++; 
    };

    $scope.page.tournamentTable.add = function(){
        $location.path("/tournament"); 
    };

    $scope.page.tournamentTable.edit = function(item){
        $location.path("/tournament/" +  item.id); 
    };

    $scope.page.tournamentTable.remove = function(item){
        function remove(){
            TournamentSrvc.removeById(item.id).then(
                function(data){
                    $scope.page.tournamentTable.selectedItems = [];
                    $scope.page.tournamentTable.refresh();
                    $scope.page.alert = UtilsSrvc.getAlert('Done!', 'Tournament is removed.', 'success', true);
                },
                function(data, status, headers, config){
                    $scope.page.alert = UtilsSrvc.getAlert('Attention!', data, 'error', true);
                });  
        };

        UtilsSrvc.openMessageBox('Remove tournament?', item.name, remove);    
    };
    
    /// Load participants count for selected tournament
    $scope.page.tournamentTable.loadParticipantsCount = function(id){
        TournamentSrvc.getParticipantsCountById(id).then(
            function(data){
                $scope.page.tournamentTable.participantsInfo = {total: data.participantsCount, unique: data.participantsUniqueCount};
            },
            function(data, status, headers, config){
                $scope.page.alert = UtilsSrvc.getAlert('Attention!', data, 'error', true);
            });
    };
 
    $scope.page.tournamentTable.onSelect = function(item){
        if (!item){
            $scope.pageStore.tournaments.gridTournaments.selectedId = null;            
            return;
        }

        $scope.page.competitionTable.refresh();
        $scope.page.competitionTable.loadDates(item.id);
        $scope.page.tournamentTable.loadParticipantsCount(item.id);
		//$scope.pageStore.tournaments.gridCompetitions = {filterDate: ''};
        $scope.pageStore.tournaments.gridTournaments.selectedId = item.id;        
    };

    $scope.page.tournamentTable.onSelectCell = function(item, property){
        if (!item) return;

        property.onClickCell(item.id);
    };

    $scope.page.tournamentTable.checkIn = function(item){
        $location.path("/registration/" + item.id); 
    };

    /// Load all Tournament Statuses for combobox
    $scope.page.loadTournamentStatuses = function(){
        TournamentStatusSrvc.getAll().then(
            function(data){
                $scope.page.tournamentTable.statuses = data.children;
            },
            function(data, status, headers, config){
                $scope.page.alert = UtilsSrvc.getAlert('Attention!', data, 'error', true);
            });
    };

    /// Load all Tournament Ranks for combobox
    $scope.page.loadTournamentRanks = function(){
        TournamentRankSrvc.getAll().then(
            function(data){
                $scope.page.tournamentTable.ranks = data.children;
            },
            function(data, status, headers, config){
                $scope.page.alert = UtilsSrvc.getAlert('Attention!', data, 'error', true);
            });
    };

	 
       

    // 
    $scope.page.competitionTable.loadItems = function(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText){
        CompetitionSrvc.getAllForGrid(pageCurr, pageSize, sqlName, isDown, searchSqlName, searchText, {date: $scope.pageStore.tournaments.gridCompetitions.filterDate, tournamentId: $scope.page.tournamentTable.selectedItems[0].id}).then(
            function(data){
	            data = data.children;
                $scope.page.competitionTable.pageTotal = Math.ceil(data.itemsTotal / pageSize);
                $scope.page.competitionTable.itemsTotal = data.itemsTotal;
                $scope.page.competitionTable.items = data.items;

                if ($scope.page.competitionTable.selectedItems && $scope.page.competitionTable.items && $scope.page.competitionTable.selectedItems.length == 0 && $scope.page.competitionTable.items.length != 0){
                    var selected = $scope.page.competitionTable.items[0];

                    if ($scope.pageStore.tournaments.gridCompetitions.selectedId){
                        for(var i=0; i < data.items.length; i++){
                            if ($scope.pageStore.tournaments.gridCompetitions.selectedId == data.items[i].id){
                                var selected = data.items[i];
                                break;                                
                            }
                        }
                    } 

                    selected.rowClass = 'info';
                    $scope.page.competitionTable.selectedItems = [selected];
                    $scope.page.competitionTable.onSelect(selected);
                }
            },
            function(data){
                $scope.page.alert = UtilsSrvc.getAlert('Attention!', data, 'error', true);
            });
    };

    $scope.page.competitionTable.onSelect = function(item){
        if (!item){
            $scope.pageStore.tournaments.gridCompetitions.selectedId = null;            
            return;
        }

        $scope.pageStore.tournaments.gridCompetitions.selectedId = item.id;        
    };
 
    $scope.page.competitionTable.onSelectCell = function(item, property){ 
        if (!item) return;

        property.onClickCell(item.id);
    };

    $scope.page.competitionTable.refresh = function(){ 
        $scope.page.competitionTable.forciblyUpdate++; 
    };

	$scope.page.competitionTable.import = function(){
		$location.path("/tournament/" + $scope.page.tournamentTable.selectedItems[0].id + "/importcompetitions"); 
	};

    $scope.page.competitionTable.add = function(){
        $location.path("/tournament/" + $scope.page.tournamentTable.selectedItems[0].id + "/competition"); 
    };

    $scope.page.competitionTable.edit = function(item){
        $location.path("/tournament/" + $scope.page.tournamentTable.selectedItems[0].id + "/competition/" + item.id); 
    };

    $scope.page.competitionTable.remove = function(item){
        function remove(){
            CompetitionSrvc.removeById(item.id).then(
                function(data){
                    $scope.page.competitionTable.selectedItems = [];
                    $scope.page.competitionTable.refresh();
                    $scope.page.alert = UtilsSrvc.getAlert('Done!', 'Competition is removed.', 'success', true);
                },
                function(data, status, headers, config){
                    $scope.page.alert = UtilsSrvc.getAlert('Attention!', data, 'error', true);
                });  
        };

        UtilsSrvc.openMessageBox('Remove competition?', item.name, remove);  
    };
    
    $scope.page.competitionTable.open = function(item){
        $location.path("/competition/" + item.id + "/participants"); 
    };

    /// 
    $scope.page.competitionTable.loadDates = function(tournamentId){
        CompetitionSrvc.getDates(tournamentId).then(
            function(data){
                $scope.pageStore.tournaments.gridCompetitions.filterDate = '';
                $scope.page.competitionTable.dates = data.children;
            },
            function(data, status, headers, config){
                $scope.page.alert = UtilsSrvc.getAlert('Attention!', data, 'error', true);
            });
    };

    $scope.page.competitionTable.changeDateFilter = function(date){
        $scope.pageStore.tournaments.gridCompetitions.filterDate = date;
        $scope.page.competitionTable.refresh();
    };  


    $scope.page.init();
    $scope.page.loadTournamentStatuses();
    $scope.page.loadTournamentRanks();
});

]]></CSP>
</Export>
