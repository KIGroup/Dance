<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Web.JsonCompetitionImport">
<Super>Dance.Web.JsonBase</Super>
<TimeCreated>63312,80930.812249</TimeCreated>

<Method name="Import">
<Description>
Import all competitions from XML to table</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>srcOrigin:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	//set srcOrigin = "view-source:http://www.danceplat.ru/groupsfeed2.php?trn=10144&hash=e548c2f3e26bf3fe63143be536fd90db&all=1?trn=10144&hash=e548c2f3e26bf3fe63143be536fd90db&all=1"

	try{
		TSTART
		
		&sql(DELETE FROM Dance_Data.CompetitionImport WHERE SourceUrl = :srcOrigin)
		
		set src = $REPLACE($REPLACE($REPLACE(srcOrigin, "view-source:", ""), "http://", ""), "https://", "")
		set endServerChar = $FIND(src, "/")
		set server = $EXTRACT(src, 0, endServerChar-2)
		set url = $EXTRACT(src, endServerChar-1, *)
				
		set httprequest = ##class(%Net.HttpRequest).%New()
		set httprequest.Server = server
		set httprequest.ContentEncoding = "UTF-8"
		do httprequest.Get(url)
		
		#dim stream As %Stream.Object = httprequest.HttpResponse.Data
		#dim reader As %XML.Reader = ##class(%XML.Reader).%New()

		set sc = reader.OpenStream(stream, "literal")
		$$$THROWONERROR(st, st)

		do reader.Correlate("item", "Dance.Data.CompetitionImport")

		while reader.Next(.obj, .sc)
		{
			$$$THROWONERROR(st, st)
			
			set obj.SourceUrl = srcOrigin
			set sc = obj.%Save()
			
			$$$THROWONERROR(st, st)
			
			kill obj
		}
		
		TCOMMIT		
	}
	catch(ex){
		TROLLBACK
		
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="WriteAllToDevice">
<Description>
Write to device all imported competitions</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
		
		if (params.isNewImport = $$$YES){
			$$$THROWONERROR(st, ..Import(params.sourceUrl))
		}
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = ##class(%ListOfDataTypes).%New()
		
		
		&sql(DECLARE CRS1 CURSOR FOR 
			 	SELECT ID
			 	FROM Dance_Data.CompetitionImport
			 	WHERE SourceUrl = :params.sourceUrl)	
			
		&sql(OPEN CRS1)
		for  
		{	
			&sql(FETCH CRS1 INTO :id) 
			quit:(SQLCODE '= 0)
			
			set comp = ##class(Dance.Data.CompetitionImport).%OpenId(id,,.st)
			$$$THROWONERROR(st, st)
			
			if (proxy.trnId = ""){
				set proxy.trnId = comp.TournirId
			}
				
			set proxyComp = ##class(%ZEN.proxyObject).%New()
			set proxyComp.errorMessages = ##class(%ListOfDataTypes).%New()
			
			set proxyComp.id = id
			set proxyComp.isRemoved = comp.IsRemoved
			set proxyComp.trnId = comp.TournirId
			set proxyComp.groupId = comp.GroupId
			set proxyComp.groupIdExt = comp.GroupIdExt
			set proxyComp.date = comp.Date
			set proxyComp.limit = comp.Limit
			set proxyComp.price = comp.Price
			set proxyComp.maxAge = comp.MaxAge
			set proxyComp.minAge = comp.MinAge
			set proxyComp.name = $REPLACE(comp.Name, $c(10), "")
			
			&sql(SELECT COUNT(ID) INTO :existedComps FROM Dance_Data.Competition WHERE IdInternal = :comp.GroupId)
			if (existedComps '= 0){
				set proxyComp.exists = $$$YES
			}
			
			set realRank = ##class(Dance.Data.TournamentRank).CodeIdxOpen(comp.Rank,,.sc)
			if ($$$ISOK(sc)){
				set proxyComp.rank = ##class(JsonTournamentRank).ConvertToProxyObject(realRank)
			}
			else{
				do proxyComp.errorMessages.Insert("Rank not found! Rank code = "_comp.Rank)	
			}
			
			
			set realDicipline = ##class(Dance.Data.Discipline).CodeIdxOpen(comp.Discipline,,.sc)
			if ($$$ISOK(sc)){
				set proxyComp.discipline = ##class(JsonDiscipline).ConvertToProxyObject(realDicipline)
			}
			else{
				do proxyComp.errorMessages.Insert("Discipline not found! Discipline code = "_comp.Discipline)	
			}
			
			
			set realAge = ##class(Dance.Data.AgeCategory).CodeIdxOpen(comp.AgeCategory,,.sc)
			if ($$$ISOK(sc)){
				set proxyComp.ageCategory = ##class(JsonAgeCategory).ConvertToProxyObject(realAge)
			}
			else{
				do proxyComp.errorMessages.Insert("Age category not found! Age category code = "_comp.AgeCategory)
			}
			
			if (comp.Solo = 0){
				set typeCode = "Couples"
			}
			else{
				set typeCode = "Solo"
			}
			
			set type = ##class(Dance.Data.CompetitionType).CodeIdxOpen(typeCode,,.sc)
			if ($$$ISOK(sc)){
				set proxyComp.type = ##class(JsonCompetitionType).ConvertToProxyObject(type)
			}
			else{
				do proxyComp.errorMessages.Insert("Type not found! Is solo = "_comp.Solo)
			}

			set proxyComp.dancerClasses = ##class(JsonDancerClass).GetAll().children
			set dancerClassesList = $LISTFROMSTRING(comp.DancerClasses, ",")
			for i=1:1:$LL(dancerClassesList){
				set class = $LIST(dancerClassesList, i)
				if (class = "") continue
				
				if (##class(Dance.Data.DancerClass).CodeIdxExists(class) = 1){
					for cc=1:1:proxyComp.dancerClasses.Count(){
						if (class = proxyComp.dancerClasses.GetAt(cc).code){
							set proxyComp.dancerClasses.GetAt(cc).selected = 1
							quit
						}
					}
				}
				else{
					do proxyComp.errorMessages.Insert("Dancer class not found! Dancer class code = "_class)	
				}		
			}
			
			do proxy.children.Insert(proxyComp)	
		}
		
		&sql(CLOSE CRS1)
		
		do proxy.%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="Update">
<Description>
Create or Update object</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject($ZCVT(%request.Content.Read(),"I", "UTF8"),,.data, 1))
      	
   		set compImprt = ##class(Dance.Data.CompetitionImport).%OpenId(data.id)
   
        set compImprt.Name = data.name
      	
      	set compImprt.Discipline = ##class(Dance.Data.Discipline).%OpenId(data.discipline.id).Code
      	set compImprt.AgeCategory = ##class(Dance.Data.AgeCategory).%OpenId(data.ageCategory.id).Code
      	
      	set compImprt.Solo = (data.type.code = "Solo")
      	
      	set compImprt.Date = data.date
      	
      	set compImprt.Price = data.price
      	set compImprt.Limit = data.limit
      	
      	set compImprt.GroupId = data.groupId
      	set compImprt.GroupIdExt = data.groupIdExt
      	
      	set compImprt.DancerClasses = ""
      	for i=1:1:data.dancerClasses.Count(){
	      	if (data.dancerClasses.GetAt(i).selected '= $$$YES) continue
	      	
	    	set compImprt.DancerClasses = compImprt.DancerClasses_data.dancerClasses.GetAt(i).code_","
	    }
      	
      	set st = compImprt.%Save()
      	if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("UpdateCompetitionImportError"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="RemoveOrRestore">
<Description>
Change value of the property "IsRemoved"</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set compImprt = ##class(Dance.Data.CompetitionImport).%OpenId(id)
   		set compImprt.IsRemoved = 'compImprt.IsRemoved
		set st = compImprt.%Save()
	}
	catch ex {
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="CreateAll">
<Description>
Create all competitions in the tournament</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	set responseData = ##class(%ZEN.proxyObject).%New()
	set responseData.successCount = 0

	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
		
		set tournament = ##class(Dance.Data.Tournament).%OpenId(data.tournamentId)
		
		set responseData.itemsTotal = data.items.Count()
				
		for i=1:1:data.items.Count(){
			set proxyComp = data.items.GetAt(i)
			
			if (proxyComp.isRemoved = $$$YES){
				continue
			}
			
			if (proxyComp.errorMessages.Count() '= 0){
				continue
			}
			
			&sql(SELECT COUNT(ID) INTO :existedComps FROM Dance_Data.Competition WHERE IdInternal = :proxyComp.groupId)
			
			if (existedComps '= 0){
				continue
			}
		
			set competition = ##class(Dance.Data.Competition).%New()
			set competition.IdInternal = proxyComp.groupId
			set competition.IdExternal = proxyComp.groupIdExt
			
			set competition.Tournament = tournament
			set competition.Name = ##class(Dance.Data.Localization.LText).Create(proxyComp.name)
			set competition.Discipline = ##class(Dance.Data.Discipline).%OpenId(proxyComp.discipline.id)
			set competition.AgeCategory = ##class(Dance.Data.AgeCategory).%OpenId(proxyComp.ageCategory.id, ,.st)
			set competition.Type = ##class(Dance.Data.CompetitionType).%OpenId(proxyComp.type.id)
			
			set competition.StartDate = $ZDATEH(proxyComp.date, 15)
			set competition.Price = proxyComp.price
			
			for d=1:1:proxyComp.dancerClasses.Count(){	
	      		set dancerClasses = ##class(Dance.Data.DancerClass).%OpenId(proxyComp.dancerClasses.GetAt(d).id,,.st)
	      		
	      		if ($$$ISERR(st)) || (proxyComp.dancerClasses.GetAt(d).selected '= $$$YES) continue
	      		
	    		do competition.DancerClasses.SetAt(dancerClasses, dancerClasses.%Id())
	    	}
      	
      		set st = competition.%Save()
      		if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("ExportCompetitionsToTheTournamentError"," | "_st))
			
			set responseData.successCount = responseData.successCount + 1
			do ##class(Dance.Data.CompetitionImport).%DeleteId(proxyComp.id)
		}
		
		do responseData.%ToJSON()
		
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>
</Class>
</Export>
