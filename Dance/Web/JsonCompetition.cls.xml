<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Web.JsonCompetition">
<Super>Dance.Web.JsonBase</Super>
<TimeCreated>63291,4219.46419</TimeCreated>

<Method name="ConvertToProxyObject">
<Description>
Convert "Competition" object to %ZEN.proxyObject (for JSON)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>object:Dance.Data.Competition,isFullInfo:%Boolean=0</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	try{
		set proxy.id = object.%Id()
		set proxy.name = object.Name.Value
		set proxy.tournament = ##class(JsonTournament).ConvertToProxyObject(object.Tournament)
		set proxy.discipline = ##class(JsonDiscipline).ConvertToProxyObject(object.Discipline)
		set proxy.ageCategory = ##class(JsonAgeCategory).ConvertToProxyObject(object.AgeCategory)
		set proxy.type = ##class(JsonCompetitionType).ConvertToProxyObject(object.Type)
		
		set proxy.startDate = $ZDATE(object.StartDate, 3)
		set proxy.startTime = $e(##class(%Library.Time).LogicalToDisplay(object.StartTime), 1, 5)
		
		set proxy.price = object.Price
		set proxy.limit = object.Limit
		set proxy.isInternational = object.IsInternational
		
		set proxy.idInternal = object.IdInternal
		set proxy.idExternal = object.IdExternal 
		
		// DancerClasses array
		set proxy.dancerClasses = ##class(%ListOfObjects).%New()
		set dcKey = ""
		for i=1:1:object.DancerClasses.Count(){
			set dcKey = object.DancerClasses.Next(dcKey)
			set dc = object.DancerClasses.GetAt(dcKey)
			do proxy.dancerClasses.Insert(##class(JsonDancerClass).ConvertToProxyObject(dc))
		}
		
		set proxy.participantsCount = object.Participants.Count()
	}
	catch(ex){
		set proxy = ##class(%ZEN.proxyObject).%New()
	}
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or Update object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	set data.tournamentId = tournamentId
      	do ##class(Dance.Data.Competition).Save(data,.st)
      	if $$$ERROR(st) do ##class(Dance.Utils.Msg).GetErrorStatus("SaveCompetitionError"," | "_st)
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="SaveAll">
<Description>
Create or Update object</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{	
		$$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	set proxy = ##class(%ZEN.proxyObject).%New()
      	set proxy.info = ##class(%ZEN.proxyObject).%New()
      	set proxy.info.success = 0
      	set proxy.info.errors = 0
      	set proxy.info.errorMessages = ##class(%ListOfDataTypes).%New()
      	
      	for i=1:1:data.Count(){
      		TSTART
      		set item = data.GetAt(i)	
      		set item.tournamentId = tournamentId
      		do ##class(Dance.Data.Competition).Save(item,.st)
      		if $$$ISERR(st) {
	      		TROLLBACK
	      		set st = ##class(Dance.Utils.Msg).GetErrorStatus("SaveCompetitionError"," | "_st)
	      		set proxy.info.errors = proxy.info.errors + 1
 				do proxy.info.errorMessages.Insert(st)
      		}
      		else{
	      		TCOMMIT
	      		set proxy.info.success = proxy.info.success + 1
      		}
      	}
      	
      	do proxy.%ToJSON()
	}
	catch ex {
		if ($TLEVEL '= 0) TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="WriteObjectByIdToDevice">
<Description>
Open object by id, convert to proxy and write to device</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>competitionId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..ConvertToProxyObject(##class(Dance.Data.Competition).%OpenId(competitionId)).%ToJSON()
	quit $$$OK
]]></Implementation>
</Method>

<Method name="WriteAllForGridToDevice">
<Description>
Write objects to device, page by page for grid.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereCondition = "Tournament = '"_..ParseParameter(params.other.tournamentId)_"'"
      	
      	if (params.other.date '= ""){
      		set whereCondition = whereCondition_" AND StartDate = "_$ZDATEH(params.other.date,15)
      	}
      	
      	
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Dance_Data.Competition", "Dance.Data.Competition", params, whereCondition))
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="WriteAllAvailableForGridToDevice">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereCondition = "Tournament = '"_..ParseParameter(params.other.tournamentId)_"'"
      	
      	if (params.other.couple.type = "udsr"){
	      	// current year - year of birth
      		set maleAge = $P($ZD($NOW(),3), "-", 1) - $P(params.other.couple.man.dob, "-", 1)
      		set whereCondition = whereCondition_" AND AgeCategory->MinAge <= "_maleAge_" AND "_maleAge_" <= AgeCategory->MaxAge"
      	}
      	elseif (params.other.couple.type = "wdsf"){
	      	set maxAge = params.other.couple.man.maxAge
	      	set minAge = params.other.couple.man.minAge 
	  		set whereCondition = whereCondition_" AND ((AgeCategory->MinAge <= "_minAge_" AND "_minAge_" <= AgeCategory->MaxAge) OR (AgeCategory->MinAge <= "_maxAge_" AND "_maxAge_" <= AgeCategory->MaxAge))"
      	}
      	elseif (params.other.couple.type = "new"){
	   		// current year - year of birth
      		set maleAge = $P($ZD($NOW(),3), "-", 1) - $P(params.other.couple.man.dob, "-", 1)
      		set whereCondition = whereCondition_" AND AgeCategory->MinAge <= "_maleAge_" AND "_maleAge_" <= AgeCategory->MaxAge"   	
      	}
      	
      	if (params.other.couple.type = "udsr") || (params.other.couple.type = "wdsf"){
	    	set couple = ##class(Dance.Data.Couple).CommonIdxOpen(params.other.couple.man.id, params.other.couple.woman.id)
			set whereCondition = whereCondition_" AND ID NOT IN (SELECT DISTINCT prtc.Competition FROM Dance_Data.Participant as prtc WHERE prtc.Couple="_couple.%Id()_")"
      	}
      	
      	if (params.other.couple.man.id = params.other.couple.woman.id){
      		set whereCondition = whereCondition_" AND Type->Code = 'Solo'"
      	}
      	else{
	      	set whereCondition = whereCondition_" AND Type->Code = 'Couples'"
      	}
      	
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Dance_Data.Competition", "Dance.Data.Competition", params, whereCondition))
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="WriteAllForCoupleForGridToDevice">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	/*
      	set whereCondition = "Tournament = '"_..ParseParameter(params.other.tournamentId)_
      	"' AND ID IN (SELECT prtc.Competition FROM Dance_Data.Participant as prtc WHERE prtc.Couple = "_params.other.coupleId_")"
      	  	
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Dance_Data.Competition", "Dance.Data.Competition", params, whereCondition))
		*/
		
		set whereCondition = "Competition->Tournament = '"_..ParseParameter(params.other.tournamentId)_"' AND Couple = "_params.other.coupleId
      	  	
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Dance_Data.Participant", "Dance.Data.Participant", params, whereCondition))
	
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="WriteAllDatesToDevice">
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfDataTypes).%New()
	
	&sql(DECLARE CRS1 CURSOR FOR 
		 	SELECT DISTINCT(StartDate)
		 	FROM Dance_Data.Competition
		 	WHERE Tournament = :tournamentId
		 	ORDER BY StartDate)	
		
	&sql(OPEN CRS1)
	for  
	{	
		&sql(FETCH CRS1 INTO :startDate) 
		quit:(SQLCODE '= 0)
		
		do proxy.children.Insert($ZDATE(startDate, 3))	
	}
	
	&sql(CLOSE CRS1)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
