<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Web.JsonTournament">
<Super>Dance.Web.JsonBase</Super>
<TimeCreated>63289,63286.529504</TimeCreated>

<Method name="ConvertToProxyObject">
<Description>
Convert "Tournament" object to %ZEN.proxyObject (for JSON)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>object:Dance.Data.Tournament,isFullInfo:%Boolean=0</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	
	try{
		set proxy.id = object.%Id()
		set proxy.idInternal = object.IdInternal
		set proxy.idExternal = object.IdExternal
		
		if (##class(Dance.Data.Tournament).CheckUpdatePrivilege() = $$$OK){
			set proxy.hash = object.Hash
		}
		
		set proxy.name = object.Name.Value
		set proxy.fullName = object.FullName.Value
		set proxy.startDate = $ZDATE(object.StartDate, 3)
		set proxy.endDate = $ZDATE(object.EndDate, 3)
		set proxy.status = ##class(Dance.Web.JsonTournamentStatus).ConvertToProxyObject(object.TStatus)
		set proxy.rank = ##class(Dance.Web.JsonTournamentRank).ConvertToProxyObject(object.TRank)
		set proxy.competitionsCount = object.CompetitionsCount
		set proxy.participantsCount = object.ParticipantsCount
		set proxy.participantsUniqueCount = object.ParticipantsUniqueCount
		
		
		set proxy.location = ##class(%ZEN.proxyObject).%New()
		set proxy.location.country = ##class(JsonCountry).ConvertToProxyObject(object.Country)
		set proxy.location.cityName = object.City.Value
		
		set proxy.organizer = ##class(%ZEN.proxyObject).%New()
		set proxy.organizer.info = object.OrganizerInfo.Value
		set proxy.organizer.site = object.OrganizerSite
	}
	catch(ex){
		set proxy = ##class(%ZEN.proxyObject).%New()
	}
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or Update object</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	do ##class(Dance.Data.Tournament).Save(data, .st)
      	if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("SaveTournamentError"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="Deactivate">
<Description>
Change IsActive property to 0. (hide item from table)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
		
      	set st = ##class(Dance.Data.Tournament).Deactivate(id)
      	if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("DeactivateTournamentError"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="WriteObjectByIdToDevice">
<Description>
Open object by id, convert to proxy and write to device</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..ConvertToProxyObject(##class(Dance.Data.Tournament).%OpenId(id)).%ToJSON()
	quit $$$OK
]]></Implementation>
</Method>

<Method name="WriteAllForGridToDevice">
<Description>
Write objects to device, page by page for grid. </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereCondition = "IsActive = 1"
      	
      	// filters
      	if (params.other.rankId '= "") && (params.other.statusId = ""){
      		set whereCondition = whereCondition_" AND TRank="_..ParseParameter(params.other.rankId)
      	}
      	elseif (params.other.rankId = "") && (params.other.statusId '= ""){
      		set whereCondition = whereCondition_" AND TStatus="_..ParseParameter(params.other.statusId)
      	}
      	elseif (params.other.rankId '= "") && (params.other.statusId '= ""){
      		set whereCondition = whereCondition_" AND TRank="_..ParseParameter(params.other.rankId)_" AND TStatus="_..ParseParameter(params.other.statusId)
      	}
      	
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Dance_Data.Tournament", "Dance.Data.Tournament", params, whereCondition))
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="WriteAllYearsToDevice">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfDataTypes).%New()
	
	&sql(DECLARE CursYear CURSOR FOR 
		 	SELECT DISTINCT DATEPART('year', StartDate) As Year
			FROM Dance_Data.Tournament
			WHERE IsActive = 1
			ORDER BY Year)	
		
	&sql(OPEN CursYear)
	for  
	{	
		&sql(FETCH CursYear INTO :year) 
		quit:(SQLCODE '= 0)
		do proxy.children.Insert(year)	
	}
	
	&sql(CLOSE CursYear)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="WriteAllByYearToDevice">
<ClassMethod>1</ClassMethod>
<FormalSpec>year:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE CursTY CURSOR FOR 
		 SELECT ID, Name->Value, Country->Name->Value, City->Value
		 FROM Dance_Data.Tournament
		 WHERE IsActive = 1 AND DATEPART('year', StartDate) = :year 
		 ORDER BY StartDate DESC)	
		
	&sql(OPEN CursTY)
	for  
	{	
		&sql(FETCH CursTY INTO :id, :name, :country, :city) 
		quit:(SQLCODE '= 0)
		
		set obj = ##class(%ZEN.proxyObject).%New()
		set obj.id = id
		set obj.name = name
		set obj.countryName = country
		set obj.cityName = city 
		do proxy.children.Insert(obj)	
		
	}
	
	&sql(CLOSE CursTY)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
