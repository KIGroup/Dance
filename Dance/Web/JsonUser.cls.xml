<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Web.JsonUser">
<Super>Dance.Web.JsonBase</Super>
<TimeCreated>63436,73778.660914</TimeCreated>

<Method name="RegistrationUDSR">
<Description>

====================================================================================================================
Registration                                                                                            Registration
====================================================================================================================

Registration UDSR participants in the tournament</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content.Read(),,.data, 1))
		
		set (prtId, prtClass) = ""
	    if $ISOBJECT(data.couple){
			set prtId = data.couple.id
		    set prtClass = "Dance.Data.ParticipantCouple"
		}
		elseif $ISOBJECT(data.athlete){
			set prtId = data.athlete.id
		   	set prtClass = "Dance.Data.ParticipantSingle"
		}
		    
		for i=1:1:data.competitions.Count(){
		    set competition = ##class(Dance.Data.Competition).%OpenId(data.competitions.GetAt(i).id)
		    if (competition.Tournament.TStatus.Code '= "Registration") {
			    $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("RegistrationClosedError"))
		    }
		    	
		    do $CLASSMETHOD(prtClass, "Create", competition.%Id(), prtId, .st)
		    	
		    if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("SaveParticipantError"," | "_st))
		}
      	  
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="RegistrationWDSF">
<Description>
Registration UDSR participants in the tournament</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content.Read(),,.data, 1))
		
		
      	
      	  
      	
	}
	catch ex {
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="Registration">
<Description>
Registration UDSR, WDSF, OTEHR participants in the tournament</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content.Read(),,.data, 1))
      	
      	#dim competition As Dance.Data.Competition = ""

      	
      	if (data.type = "UDSF") || (data.type = "WDSF"){
	      	set (prtId, prtClass) = ""
	      	if $ISOBJECT(data.couple){
		    	set prtId = data.couple.id
		    	set prtClass = "Dance.Data.ParticipantCouple"
		    }
		    elseif $ISOBJECT(data.athlete){
			    set prtId = data.athlete.id
		    	set prtClass = "Dance.Data.ParticipantSingle"
		    }
         	
	      	for i=1:1:data.competitions.Count(){
		    	set competition = ##class(Dance.Data.Competition).%OpenId(data.competitions.GetAt(i).id)
		    	if (competition.Tournament.TStatus.Code '= "Registration") {
			    	$$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("RegistrationClosedError"))
		    	}
		    	
		    	do $CLASSMETHOD(prtClass, "Create", competition.%Id(), prtId, .st)
		    	
		    	if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("SaveParticipantError"," | "_st))
		    }
      	}  
      	  
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="GetTournamentById">
<Description>

====================================================================================================================
Tournament                                                                                                Tournament
====================================================================================================================

Get one tournament by Id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..GetProxyObject("Dance.Data.Tournament", id).%ToJSON()
]]></Implementation>
</Method>

<Method name="GetTournamentsByYear">
<Description>
Get tournament by year for combobox</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>year:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE CursTrnYear CURSOR FOR 
		 SELECT ID, Name->Value, Country->Name->Value, City->Value
		 FROM Dance_Data.Tournament
		 WHERE IsActive = 1 AND DATEPART('year', StartDate) = :year 
		 ORDER BY StartDate DESC)	
		
	&sql(OPEN CursTrnYear)
	for  
	{	
		&sql(FETCH CursTrnYear INTO :id, :name, :country, :city) 
		quit:(SQLCODE '= 0)
		
		set obj = ##class(%ZEN.proxyObject).%New()
		set obj.id = id
		set obj.name = name
		set obj.countryName = country
		set obj.cityName = city 
		do proxy.children.Insert(obj)			
	}
	
	&sql(CLOSE CursTrnYear)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTournamentsForGrid">
<Description>
Get all tournaments for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereCondition = "IsActive = 1"
      	
      	// filters
      	if (params.other.rankId '= "") && (params.other.statusId = ""){
      		set whereCondition = whereCondition_" AND TRank="_..ParseParameter(params.other.rankId)
      	}
      	elseif (params.other.rankId = "") && (params.other.statusId '= ""){
      		set whereCondition = whereCondition_" AND TStatus="_..ParseParameter(params.other.statusId)
      	}
      	elseif (params.other.rankId '= "") && (params.other.statusId '= ""){
      		set whereCondition = whereCondition_" AND TRank="_..ParseParameter(params.other.rankId)_" AND TStatus="_..ParseParameter(params.other.statusId)
      	}
      	
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Dance_Data.Tournament", "Dance.Data.Tournament", params, whereCondition))
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetTournamentYears">
<Description>
Get all years of the tournaments for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfDataTypes).%New()
	
	&sql(DECLARE CursYear CURSOR FOR 
		 	SELECT DISTINCT DATEPART('year', StartDate) As Year
			FROM Dance_Data.Tournament
			WHERE IsActive = 1
			ORDER BY Year)	
		
	&sql(OPEN CursYear)
	for  
	{	
		&sql(FETCH CursYear INTO :year) 
		quit:(SQLCODE '= 0)
		do proxy.children.Insert(year)	
	}
	
	&sql(CLOSE CursYear)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTournamentRanks">
<Description>
Get tournament ranks for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE TRCurFirst CURSOR FOR 
		 	SELECT ID, Name->Value
		 	FROM Dance_Data.TournamentRank
		 	ORDER BY Name->Value)	
		
	&sql(OPEN TRCurFirst)
	for  
	{	
		&sql(FETCH TRCurFirst INTO :id, :name) 
		quit:(SQLCODE '= 0)
		set rankProxy = ##class(%ZEN.proxyObject).%New()
		set rankProxy.id = id
		set rankProxy.name = name
		do proxy.children.Insert(rankProxy)
	}
	&sql(CLOSE TRCurFirst)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTournamentStatuses">
<Description>
Get tournament statuses for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE CR1 CURSOR FOR 
		 	SELECT ID, Name->Value, Code
		 	FROM Dance_Data.TournamentStatus
		 	ORDER BY Sequence)	
		
	&sql(OPEN CR1)
	for  
	{	
		&sql(FETCH CR1 INTO :id, :name, :code) 
		quit:(SQLCODE '= 0)
		
		set tstatus = ##class(%ZEN.proxyObject).%New()	
		set tstatus.id = id
		set tstatus.name = name
		set tstatus.code = code
		
		do proxy.children.Insert(tstatus)	
	}
	
	&sql(CLOSE CR1)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTournamentDates">
<Description>
Get tournament dates for combobox</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfDataTypes).%New()
	
	&sql(DECLARE CRS1 CURSOR FOR 
		 	SELECT DISTINCT(StartDate)
		 	FROM Dance_Data.Competition
		 	WHERE IsActive = 1 AND Tournament = :tournamentId
		 	ORDER BY StartDate)	
		
	&sql(OPEN CRS1)
	for  
	{	
		&sql(FETCH CRS1 INTO :startDate) 
		quit:(SQLCODE '= 0)
		
		do proxy.children.Insert($ZDATE(startDate, 3))	
	}
	
	&sql(CLOSE CRS1)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCompetitionById">
<Description>
====================================================================================================================
Competition                                                                                              Competition
====================================================================================================================

Get one competition by id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>competitionId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..GetProxyObject("Dance.Data.Competition", competitionId).%ToJSON()
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetTournamentCompetitionsForGrid">
<Description>
Get all tournament competitions for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereCondition = "IsActive = 1 AND Tournament = '"_..ParseParameter(params.other.tournamentId)_"'"
      	
      	if (params.other.date '= ""){
      		set whereCondition = whereCondition_" AND StartDate = "_$ZDATEH(params.other.date,15)
      	}
      	
      	if (params.other.type = "WDSF"){
      		set whereCondition = whereCondition_" AND IsInternational = 1"
      	}
      	
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Dance_Data.Competition", "Dance.Data.Competition", params, whereCondition))
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetCompetitionTypes">
<Description>
Get competition types for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE CurCmpTypes CURSOR FOR 
		 	SELECT ID, Name->Value
		 	FROM Dance_Data.CompetitionType)	
		
	&sql(OPEN CurCmpTypes)
	for  
	{	
		&sql(FETCH CurCmpTypes INTO :id, :name) 
		quit:(SQLCODE '= 0)
		
		set type = ##class(%ZEN.proxyObject).%New()	
		set type.id = id
		set type.name = name
		
		do proxy.children.Insert(type)	
	}
	
	&sql(CLOSE CurCmpTypes)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAvailableCompetitionsForGrid">
<Description>
Available participants competitions for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
      	
      	set whereCondition = "IsActive = 1 AND Tournament = '"_..ParseParameter(params.other.tournamentId)_"'"
      	set maleSTClass = ""
      	set maleLAClass = ""
      	set isSolo = $$$NO
      	set man = ""
      	
      	if $ISOBJECT(params.other.couple){
      		set man = params.other.couple.man
      		set whereCondition = whereCondition_" AND Type->Code = 'Couples' "
      		if (params.other.type '= "OTHER"){
      			set whereCondition = whereCondition_" AND ID NOT IN (SELECT DISTINCT prtc.Competition FROM Dance_Data.ParticipantCouple as prtc WHERE prtc.Couple="_params.other.couple.id_") "
      		}
      	}
      	elseif $ISOBJECT(params.other.athlete){
			set man = params.other.athlete
	      	set whereCondition = whereCondition_" AND Type->Code = 'Solo'"
	      	if (params.other.type '= "OTHER"){
      			set whereCondition = whereCondition_" AND ID NOT IN (SELECT DISTINCT prtc.Competition FROM Dance_Data.ParticipantSingle as prtc WHERE prtc.Athlete="_params.other.athlete.id_") "
      		}
	   	}
      	
      	// current year - year of birth
      	set maleAge = $P($ZD($NOW(),3), "-", 1) - $P(man.dob, "-", 1)
      	set whereCondition = whereCondition_" AND AgeCategory->MinAge <= "_maleAge_" AND "_maleAge_" <= AgeCategory->MaxAge "
      	
      	if (params.other.type = "UDSR"){
	      	set maleSTClass = man.stClass.code
      		set maleLAClass = man.laClass.code     	   	
      	}
      	elseif (params.other.type = "WDSF"){
	      	set whereCondition = whereCondition_" AND IsInternational = 1 "
      	}
      	
     	
		set sql = "SELECT ID FROM Dance_Data.Competition WHERE "_whereCondition_" ORDER BY StartDate"
		
		set statement = ##class(%SQL.Statement).%New()	
		$$$THROWONERROR(status, statement.%Prepare(sql))		

		set rs = statement.%Execute()
		set ^tt = sql
		set proxyItems = ##class(%ListOfObjects).%New()			
		
		while (rs.%Next() '= 0){
			set cmp = ##class(Dance.Data.Competition).%OpenId(rs.%GetData(1),,.st)
			
			if (maleSTClass = "") && (maleLAClass = ""){
				do proxyItems.Insert(cmp.ConvertToProxyObject())
			}
			elseif (cmp.Discipline.Code = "Ст"){
				set key = ""
				for i=1:1:cmp.DancerClasses.Count(){
					set key = cmp.DancerClasses.Next(key)
					if (cmp.DancerClasses.GetAt(key).Code = maleSTClass){
						do proxyItems.Insert(cmp.ConvertToProxyObject())
						quit
					}
				}
			}
			elseif (cmp.Discipline.Code = "Ла"){
				set key = ""
				for i=1:1:cmp.DancerClasses.Count(){
					set key = cmp.DancerClasses.Next(key)
					if (cmp.DancerClasses.GetAt(key).Code = maleLAClass){
						do proxyItems.Insert(cmp.ConvertToProxyObject())
						quit
					}
				}
			}
			else{
				set key = ""
				for i=1:1:cmp.DancerClasses.Count(){
					set key = cmp.DancerClasses.Next(key)
					if (cmp.DancerClasses.GetAt(key).Code = maleLAClass) || (cmp.DancerClasses.GetAt(key).Code = maleSTClass){
						do proxyItems.Insert(cmp.ConvertToProxyObject())
						quit
					}
				}
			}	
		}
		
		// Общее число элементов с заданными параметрами в WHERE
		set itemsTotal = rs.%ROWCOUNT
		
		do rs.%Close()						
		do statement.%Close()
		
		set proxyResult = ##class(%ZEN.proxyObject).%New()
		set proxyResult.children = ##class(%ZEN.proxyObject).%New()
		set proxyResult.children.items = proxyItems
	    set proxyResult.children.itemsTotal = itemsTotal
	    do proxyResult.%ToJSON()
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetTournamentParticipantsForGrid">
<Description>

====================================================================================================================
Participant                                                                                              Participant
====================================================================================================================

Get all participants of the tournament for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
 		
 		set whereCondition = "Competition->Tournament = '"_..ParseParameter(params.other.tournamentId)_"'"     	
 		
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Dance_Data.Participant", "Dance.Data.Participant", params, whereCondition))
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetCompetitionParticipantsForGrid">
<Description>
Get all participants of the competition for grid</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
 		
 		set whereCondition = "IsActive = 1 AND Competition = '"_..ParseParameter(params.other.competitionId)_"'"     	
 		
      	$$$THROWONERROR(st, ..WriteJsonForGrid("SELECT ID FROM Dance_Data.Participant", "Dance.Data.Participant", params, whereCondition))
	}
	catch ex {
		set st = ex.AsStatus()
	}

	quit st
]]></Implementation>
</Method>

<Method name="GetCoupleParticipants">
<Description>
Get participants of the couple (in the tournament) </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>tournamentId:%String,coupleId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfObjects).%New()
	
	try{
		set convertParams = ##class(%ZEN.proxyObject).%New()
		set convertParams.isFullInfo = $$$YES
		
		&sql(DECLARE PrtCur CURSOR FOR
			 SELECT ID 
			 FROM Dance_Data.ParticipantCouple
			 WHERE Couple = :coupleId AND Competition->Tournament = :tournamentId)	
		
		&sql(OPEN PrtCur)
		for  
		{	
			&sql(FETCH PrtCur INTO :id) 
			quit:(SQLCODE '= 0)
	
			set prtProxy = ##class(Dance.Data.ParticipantCouple).%OpenId(id).ConvertToProxyObject()
			do proxy.children.Insert(prtProxy)
		}
		
		&sql(CLOSE PrtCur)
		
		do proxy.%ToJSON()
	}
	catch ex{
		set st = ex.AsStatus()	
	}
	
	q st
]]></Implementation>
</Method>

<Method name="GetCoupleById">
<Description>

====================================================================================================================
Couple                                                                                                        Couple
====================================================================================================================

Get one couple by Id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ..GetProxyObject("Dance.Data.Couple", id)
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetCoupleUDSRByNumbers">
<Description>
Get couple UDSR by numbers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>manNumber:%String,womanNumber:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set couple = ##class(Dance.Data.CoupleUDSR).GetByNumbers(manNumber, womanNumber, .st)
		$$$THROWONERROR(st, st)
		
		do couple.ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCoupleWDSFByNumbers">
<Description>
Get couple UDSR by numbers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>manNumber:%String,womanNumber:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		set couple = ##class(Dance.Data.CoupleWDSF).GetByNumbers(manNumber, womanNumber, .st)
		$$$THROWONERROR(st, st)
		
		do couple.ConvertToProxyObject().%ToJSON()
	
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="RegistrationExistingCouple">
<Description>
Registration UDSR or WDSF couple in the tournament</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content.Read(),,.data, 1))
      	
      	set couple = ##class(Dance.Data.Couple).CommonIdxOpen(data.man.id, data.woman.id)
      	
      	#dim competition As Dance.Data.Competition = ""
      	
      	for i=1:1:data.competitions.Count(){
	    	set competition = ##class(Dance.Data.Competition).%OpenId(data.competitions.GetAt(i).id)
	    	if (competition.Tournament.TStatus.Code '= "Registration") {
		    	$$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("RegistrationClosedError"))
	    	}
	    	
	    	do ##class(Dance.Data.ParticipantCouple).Create(competition.%Id(), couple.%Id(), .st)
	    	
	    	if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("SaveParticipantError"," | "_st))
	    }
	    
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="RegistrationNewCouple">
<Description>
Registration new couple in the tournament</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content.Read(),,.data, 1))
      	
      	do ##class(Dance.Data.ParticipantTemp).Create(data,.st)
      	if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("SaveParticipantError"," | "_st))
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="GetPersonByUDSRNumber">
<Description>

====================================================================================================================
Person                                                                                                        Person
====================================================================================================================

Get person UDSR by numbers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>number:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		set athlete = ##class(Dance.Data.PersonUDSR).NumberUDSRIdxOpen(number,,.st)
		$$$THROWONERROR(st, st)
		do athlete.ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetPersonByWDSFNumber">
<Description>
Get person UDSR by numbers</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>number:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		if (##class(Dance.Data.PersonWDSF).NumberWDSFIdxExists(number)){
			set athlete = ##class(Dance.Data.PersonWDSF).NumberWDSFIdxOpen(number,,.st)
			set diffDays = $SYSTEM.SQL.DATEDIFF("dd", $P(athlete.Updated, " ", 1), $P($ZDT($ZTS, 3), " ", 1))
			if (diffDays <= 7){
				return athlete.ConvertToProxyObject().%ToJSON()
			}	 	
		}
		
		set wdsfData = ##class(Dance.Wdsf.ControllerAPI).GetPerson(number, .st)
		$$$THROWONERROR(st, st)
		
		set athlete = ##class(Dance.Data.PersonWDSF).SaveFromWDSF(wdsfData, .st)		
		$$$THROWONERROR(st, st)
		
		do athlete.ConvertToProxyObject().%ToJSON()
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetCountries">
<Description>

====================================================================================================================
Other                                                                                                          Other
====================================================================================================================

WDSF countries for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE Curr1 CURSOR FOR 
		 	SELECT ID, Name->Value
		 	FROM Dance_Data.Country
		 	ORDER BY Name->Value)	
		
	&sql(OPEN Curr1)
	for  
	{	
		&sql(FETCH Curr1 INTO :id, :name) 
		quit:(SQLCODE '= 0)
		
		set country = ##class(%ZEN.proxyObject).%New()	
		set country.id = id
		set country.name = name
		
		do proxy.children.Insert(country)	
	}
	
	&sql(CLOSE Curr1)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetLanguages">
<Description>
All System languages for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	try{		
		set list = ##class(%ListOfObjects).%New()
		
		&sql(DECLARE LangCurs CURSOR FOR
			 SELECT Code, Name 
			 FROM Dance_Data_Localization.LTextLanguage
			 ORDER BY Code)
		
		&sql(OPEN LangCurs)
		for{
			&sql(FETCH LangCurs INTO :code, :name) 
			quit:(SQLCODE '= 0)
			
			set proxy = ##class(%ZEN.proxyObject).%New()
			set proxy.code = code
			set proxy.name = name
			set proxy.flagUrl = "img/flags/"_code_".png"
			
			do list.Insert(proxy)	
		}
		
		&sql(CLOSE LangCurs)
		
		set proxy = ##class(%ZEN.proxyObject).%New()
		set proxy.children = list
		do proxy.%ToJSON()
	}
	catch(ex){
		set status = ex.AsStatus()
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetDisciplines">
<Description>
All disciplines for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	quit ..WriteJsonFromSql("SELECT ID as id, Name->Value as name FROM Dance_Data.Discipline")
]]></Implementation>
</Method>

<Method name="GetDancerClasses">
<Description>
All dancer classes for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(Dance.Data.DancerClass).GetAll().%ToJSON()	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAgeCategories">
<Description>
All age categories for combobox</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.children = ##class(%ListOfObjects).%New()
	
	&sql(DECLARE CurAgeCategories CURSOR FOR 
		 	SELECT ID
		 	FROM Dance_Data.AgeCategory
		 	ORDER BY Name->Value)	
		
	&sql(OPEN CurAgeCategories)
	for  
	{	
		&sql(FETCH CurAgeCategories INTO :id) 
		quit:(SQLCODE '= 0)
		
		do proxy.children.Insert(##class(Dance.Data.AgeCategory).%OpenId(id).ConvertToProxyObject())	
	}
	
	&sql(CLOSE CurAgeCategories)
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateFeedBack">
<Description>
Feedback from users </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.data, 1))
      	
      	set fb = ##class(Dance.Data.FeedBack).%New()
      	set fb.Author = $ZCVT(data.author, "I", "UTF8")
      	set fb.Email = $ZCVT(data.email, "I", "UTF8")
      	set fb.Subject = $ZCVT(data.subject, "I", "UTF8")
      	set fb.Msg = $ZCVT(data.msg, "I", "UTF8")
      	
      	set st = fb.%Save()
      	
      	if $$$ISERR(st) $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("SaveFeedBackError"," | "_st))
      	
      	
		do ##class(Dance.Utils.Email).Send($GET(^Settings("Dance","OperatorEmail")), 
		"Танцы. Обратная связь "_$ZDT($ZTS,3), 
		"Автор: "_fb.Author_"<br>"_
		"Email: "_fb.Email_"<br>"_
		"Тема: "_fb.Subject_"<br>"_
		"Сообщение: <br>"_fb.Msg)      	
      	
      	TCOMMIT
	}
	catch ex {
		TROLLBACK
		set st = ex.AsStatus()
	}
			
	quit st
]]></Implementation>
</Method>

<Method name="GetPersonStatistics">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.allCount = 0
	set proxy.udsrCount = 0
	set proxy.wdsfCount = 0
	set proxy.otherCount = 0
	
	&sql(SELECT COUNT(ID) INTO :proxy.allCount FROM Dance_Data.Person)
	&sql(SELECT COUNT(ID) INTO :proxy.udsrCount FROM Dance_Data.PersonUDSR)
	&sql(SELECT COUNT(ID) INTO :proxy.wdsfCount FROM Dance_Data.PersonWDSF)
	
	set proxy.udsrLastUpdated = $G(^Settings("Dance","UDSRPersonsLastUpdated"))
	
	do proxy.%ToJSON()
	
	quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
