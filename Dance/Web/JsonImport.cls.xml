<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Web.JsonImport">
<Super>Dance.Web.JsonBase</Super>
<TimeCreated>63317,86359.354173</TimeCreated>

<Method name="WriteImportedTournamentsToDevice">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
	
		$$$THROWONERROR(st, ##class(Dance.Data.Import.Tournament).Import("Dance.Data.Import.Tournament", $G(^Settings("Dance", "Import", "TournamentsPage"))))
			
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="WriteImportedTicketsToDevice">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		$$$THROWONERROR(st, ##class(Dance.Data.Tournament).CheckUpdatePrivilege())
		
		$$$THROWONERROR(st, ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.params, 1))
		
		set tournament = ##class(Dance.Data.Tournament).%OpenId(params.other.tournamentId)
		set page = $G(^Settings("Dance", "Import", "TicketsPage"))_"?trn="_tournament.IdInternal_"&hash="_tournament.Hash
		
		$$$THROWONERROR(st, ##class(Dance.Data.Import.Tournament).Import("Dance.Data.Import.Ticket", page))
		
		
			
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	quit st
]]></Implementation>
</Method>
</Class>
</Export>
