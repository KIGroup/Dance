<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Data.Person">
<Super>%Persistent</Super>
<TimeCreated>63274,63498.354989</TimeCreated>

<Property name="Number">
<Description>
Athlete number</Description>
<Type>%String</Type>
</Property>

<Property name="Gender">
<Description>
Male or Female</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",Male,Female"/>
</Property>

<Property name="FirstName">
<Description>
First name</Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="LastName">
<Description>
Last name</Description>
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Country">
<Type>Country</Type>
<Required>1</Required>
</Property>

<Property name="Updated">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.number = ..Number
	set proxy.lastName = ..LastName.Value
	set proxy.firstName = ..FirstName.Value
	set proxy.gender = ..Gender	
	set proxy.updated = ..Updated
	set proxy.otherInfo = ##class(%ZEN.proxyObject).%New()
	set proxy.otherInfo.country = ..Country.ConvertToProxyObject()
		
	quit proxy
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
ClassMethod UpdateFromString(data As %String, gender As %Char) As %Status
{
	do ##class(%MessageDictionary).SetSessionLanguage("ru")
	set st = $$$OK
	
	try{
		TSTART
			
		set propList = $LISTFROMSTRING(data, ";")
		set person = ..GetByNumberUSDR($LIST(propList, 1))
			
		if ($ISOBJECT(person) = 0){
			set person = ##class(Dance.Data.Person).%New()
			set person.Gender = gender
			
			//1 Номер
			set person.NumberUDSR = $LIST(propList, 1)
				
			//2 Фамилия Имя
			set person.LastName =  ##class(Dance.Data.Localization.LText).Create($P($LIST(propList, 2)," ",1), "Dance.Data.Localization.Translation;PersonLTextValue")		
			set person.FirstName =  ##class(Dance.Data.Localization.LText).Create($P($LIST(propList, 2)," ",2), "Dance.Data.Localization.Translation;PersonLTextValue")		
			
			//11 Фио на англ.
			do ##class(%MessageDictionary).SetSessionLanguage("en")
			set person.LastName.Value = $P($LIST(propList, 11)," ",1)
			set person.FirstName.Value = $P($LIST(propList, 11)," ",2)
			do ##class(%MessageDictionary).SetSessionLanguage("ru")
		}
			
		//4 Дата рождения
		set dob = $LIST(propList, 4)
		if (dob '= "") && ($LENGTH(dob) = 10) set person.DOB = $ZDATEH($REPLACE(dob,".","/"), 4)
			
		//5 Класс ST
		set person.STClass = ##class(Dance.Data.DancerClass).GetByName($REPLACE($ZCONVERT($LIST(propList, 5), "U"), "М", "M"), .st)
			
		//7 Класс LA
		set person.LAClass = ##class(Dance.Data.DancerClass).GetByName( $REPLACE($ZCONVERT($LIST(propList, 7), "U"), "М", "M"), .st)		
			
		//12 Клуб
		set person.Club = $LIST(propList, 12)
	
		//13 Город/регион
		set person.City = $LIST(propList, 13)
	
		//14 Старший тренер
		set person.MainTrainer = $LIST(propList, 14)

		//15 Тренер 2
		//16 Тренер 3
		if ($LIST(propList, 16) '= ""){
			set person.OtherTrainers = $LIST(propList, 15)_", "_$LIST(propList, 16)
		}
		else{
			set person.OtherTrainers = $LIST(propList, 15)
		}
							
		set person.Country = ##class(Dance.Data.Country).WDSFNameIdxOpen("Russian Federation")
			
		set person.LastUpdated = $ZDT($ZTS,3)
 
		$$$THROWONERROR(st, person.%Save())		
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
	}
	
	quit st
}

ClassMethod GetByNumberUSDR(number As %String) As Person
{
	set number = +number
	set id = ""
	&sql(SELECT ID INTO :id FROM Dance_Data.Person WHERE NumberUDSR = :number)
	quit ..%OpenId(id)
}

ClassMethod GetByNumberWDSF(number As %String) As Person
{
	&sql(SELECT ID INTO :id FROM Dance_Data.Person WHERE NumberWDSF = :number)
	quit ..%OpenId(id)
}

ClassMethod GetByNumber(number As %String) As Person
{
	set number = +number
	set id = ""
	&sql(SELECT ID INTO :id FROM Dance_Data.Person WHERE NumberWDSF = :number OR NumberUDSR = :number)
	quit ..%OpenId(id)
}

/// Create or save modified person
ClassMethod Save(data As %RegisteredObject, ByRef st) As Dance.Data.Person
{
	do ##class(Dance.Utils.Journal).Create("Log","Data.Person.Save", 
	"ID = "_data.id_"; "_
	"LastName = "_data.lastName_"; "_
	"FirstName = "_data.firstName_"; "_
	"NumberUDSR = "_data.numberUDSR_"; "_
	"NumberWDSF = "_data.numberWDSF_"; "_
	"DOB = "_data.dob_"; "_
	"MaxDOB = "_data.maxDOB_"; "_
	"MinDOB = "_data.minDOB_"; "_
	"CountryId = "_data.otherInfo.country.id)
	
	if (data.id '= ""){
		set person = ..%OpenId(data.id, 3, .st)
		set person.LastName.Value = $ZCONVERT(data.lastName, "I","UTF8")
		set person.FirstName.Value = $ZCONVERT(data.firstName, "I","UTF8")
	}
	else{
		set person = ..%New()
		set person.LastName = ##class(Dance.Data.Localization.LText).Create($ZCONVERT(data.lastName, "I","UTF8"))
		set person.FirstName = ##class(Dance.Data.Localization.LText).Create($ZCONVERT(data.firstName, "I","UTF8"))
	}
	
	set person.Gender = data.gender
	set person.NumberUDSR = data.numberUDSR
	set person.NumberWDSF = data.numberWDSF
	
	set person.City = $ZCONVERT(data.otherInfo.cityName, "I","UTF8")
	set person.Country = ##class(Dance.Data.Country).%OpenId(data.otherInfo.country.id)
	set person.Club = $ZCONVERT(data.otherInfo.club, "I","UTF8")
	set person.MainTrainer = $ZCONVERT(data.otherInfo.mainTrainer, "I","UTF8")
	set person.OtherTrainers = $ZCONVERT(data.otherInfo.otherTrainers, "I","UTF8")
	
	if (data.dob '= ""){
		set person.DOB = $ZDH(data.dob, 3)
	}
	if ($ISOBJECT(data.laClass) = $$$YES) && (##class(Dance.Data.DancerClass).%ExistsId(data.laClass.id)){ 
		set person.LAClass = ##class(Dance.Data.DancerClass).%OpenId(data.laClass.id)
	}
	
	if ($ISOBJECT(data.stClass) = $$$YES) && (##class(Dance.Data.DancerClass).%ExistsId(data.stClass.id)){ 
		set person.STClass = ##class(Dance.Data.DancerClass).%OpenId(data.stClass.id)
	}
	
	set person.LastUpdated = $ZDT($ZTS, 3)
	set st = person.%Save()

	quit person
}

/// Delete person if it is available
ClassMethod Delete(personId As %String) As %Status
{
	set person = ..%OpenId(personId, 4)

	set st = ##class(Dance.Data.Localization.LText).Delete(person.LastName.%Id())
	quit:$$$ISERR(st) st
		
	set st = ##class(Dance.Data.Localization.LText).Delete(person.FirstName.%Id())
	quit:$$$ISERR(st) st
	
	set st = ..%DeleteId(personId,4)
	quit:$$$ISERR(st) ##class(Dance.Utils.Msg).GetErrorStatus("DeletePerson", " | "_st) 
	
	quit $$$OK
}

/// Get person competitions in other tournaments in that day(yyyy-mm-dd)
ClassMethod SetCompetitionsOtherTournamentsOnDay(ByRef list As %ListOfObjects, trnId As %String, personId As %String, date As %String) As %Status
{
	&sql(DECLARE Cur1 CURSOR FOR
		 SELECT Competition
		 FROM Dance_Data.Participant
		 WHERE (Couple->Man = :personId OR Couple->Woman = :personId) 
		        AND Competition->StartDate = :date
		        AND Competition->Tournament <> :trnId)	
		
	&sql(OPEN Cur1)
	for  
	{	
		&sql(FETCH Cur1 INTO :competitionId) 
		quit:(SQLCODE '= 0)
		
		set competition = ##class(Dance.Web.JsonCompetition).ConvertToProxyObject(##class(Dance.Data.Competition).%OpenId(competitionId))		
		do list.Insert(competition)
	}
	
	&sql(CLOSE Cur1)
	
	quit $$$OK
}
*/
]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.PersonD</DataLocation>
<DefaultData>PersonDefaultData</DefaultData>
<IdLocation>^Dance.Data.PersonD</IdLocation>
<IndexLocation>^Dance.Data.PersonI</IndexLocation>
<StreamLocation>^Dance.Data.PersonS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PersonDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Number</Value>
</Value>
<Value name="3">
<Value>Gender</Value>
</Value>
<Value name="4">
<Value>FirstName</Value>
</Value>
<Value name="5">
<Value>LastName</Value>
</Value>
<Value name="6">
<Value>Country</Value>
</Value>
<Value name="7">
<Value>LastUpdated</Value>
</Value>
<Value name="8">
<Value>Updated</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
