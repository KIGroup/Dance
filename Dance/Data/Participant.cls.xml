<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Data.Participant">
<Description>
Couple - participant of the competition</Description>
<Super>%Persistent</Super>
<TimeCreated>63295,5554.902115</TimeCreated>

<Property name="FullName">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {FullName} = ##class({%%CLASSNAME}).GetFullName({%%ID}, {PType})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="Recorder">
<Type>Recorder</Type>
<Required>1</Required>
</Property>

<Property name="Competition">
<Type>Competition</Type>
<Required>1</Required>
</Property>

<Property name="Tickets">
<Type>Dance.Data.Ticket</Type>
<Cardinality>many</Cardinality>
<Inverse>Participant</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="TicketStatus">
<Type>%String</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {TicketStatus} = ##class({%%CLASSNAME}).GetTicketStatus({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="IsActive">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Property name="PType">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Created">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Index name="CompetitionIdx">
<Properties>Competition</Properties>
</Index>

<UDLText name="T">
<Content><![CDATA[
// Index PTypeIdx On PType;

]]></Content>
</UDLText>

<Method name="ConvertToProxyObject">
<FormalSpec>params:%ZEN.proxyObject</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.competition = ..Competition.ConvertToProxyObject(params.competitionParams)
	set proxy.isActive = ..IsActive
	set proxy.created = ..Created
	set proxy.ticketStatus = ##class(TicketStatus).CodeIdxOpen(..TicketStatus).ConvertToProxyObject()
	
	quit proxy
]]></Implementation>
</Method>

<Method name="GetFullName">
<ClassMethod>1</ClassMethod>
<FormalSpec>prtId:%String,pType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set fullName = ""
	
	if (pType = "CoupleUDSR"){
		&sql(SELECT Couple->Man->LastName->Value || ' ' || Couple->Man->FirstName->Value || ' - ' ||
					Couple->Woman->LastName->Value || ' ' || Couple->Woman->FirstName->Value INTO :fullName
			 FROM Dance_Data.ParticipantCoupleUDSR
			 WHERE ID = :prtId)
	}
	elseif (pType = "CoupleWDSF"){
		&sql(SELECT Couple->Man->LastName->Value || ' ' || Couple->Man->FirstName->Value || ' - ' ||
					Couple->Woman->LastName->Value || ' ' || Couple->Woman->FirstName->Value INTO :fullName
			 FROM Dance_Data.ParticipantCoupleWDSF
			 WHERE ID = :prtId)
	}
	elseif (pType = "SingleUDSR"){
		&sql(SELECT Athlete->LastName->Value || ' ' || Athlete->FirstName->Value INTO :fullName
			 FROM Dance_Data.ParticipantSingleUDSR
			 WHERE ID = :prtId)
	}
	elseif (pType = "SingleWDSF"){
		&sql(SELECT Athlete->LastName->Value || ' ' || Athlete->FirstName->Value INTO :fullName
			 FROM Dance_Data.ParticipantSingleWDSF
			 WHERE ID = :prtId)
	}
	elseif (pType = "CoupleOther"){
		&sql(SELECT ManLastName || ' ' || ManFirstName || ' - ' || WomanLastName || ' ' || WomanFirstName INTO :fullName
			 FROM Dance_Data.ParticipantCoupleOther
			 WHERE ID = :prtId)
	}
	elseif (pType = "SingleOther"){
		&sql(SELECT LastName || ' ' || FirstName INTO :fullName
			 FROM Dance_Data.ParticipantSingleOther
			 WHERE ID = :prtId)
	}
	
	
	
	quit fullName
	
	
	set fullName = ""
	set prt = ..%OpenId(prtId)
	quit $CASE($CLASSNAME(prt), "Dance.Data.ParticipantCoupleUDSR"  : prt.Couple.GetFullName(),
								"Dance.Data.ParticipantCoupleWDSF"  : prt.Couple.GetFullName(),
								"Dance.Data.ParticipantSingleUDSR"  : prt.Athlete.GetFullName(),
								"Dance.Data.ParticipantSingleWDSF"  : prt.Athlete.GetFullName(),
								"Dance.Data.ParticipantCoupleOther" : prt.ManLastName_" "_prt.ManFirstName_"; "_prt.WomanLastName_" "_prt.WomanFirstName,
								"Dance.Data.ParticipantSingleOther" : prt.LastName_" "_prt.FirstName,
																    : "-")
]]></Implementation>
</Method>

<Method name="Deactivate">
<Description>
Change IsActive property to 0</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(Dance.Utils.Journal).Create("Log", "Data.Participant.Deactivate", "ID="_id_";")
	
	set obj = ..%OpenId(id)
	set obj.IsActive = 0
	
	quit obj.%Save()
]]></Implementation>
</Method>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	set ..Created = $ZDT($ZTS, 3)	
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
ClassMethod Create(competitionId As %String, coupleId As %String, ByRef st) As Participant
{
	if ..CommonIdxExists(competitionId, coupleId) {
		set obj = ..CommonIdxOpen(competitionId, coupleId)
		set obj.IsActive = 1
		set st = obj.%Save()
		quit obj
	}
	
	set obj = ..%New()
	set obj.Couple = ##class(Dance.Data.Couple).%OpenId(coupleId)
	set obj.Competition = ##class(Dance.Data.Competition).%OpenId(competitionId) 
	set obj.Created = $ZDT($ZTS, 3)
	set st = obj.%Save()
	quit obj
}
*/
]]></Content>
</UDLText>

<Method name="GetTicketStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>participantId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set status = "Not paid"
	
	&sql(SELECT TStatus->Code INTO :status FROM Dance_Data.Ticket WHERE Participant = :participantId)	

	quit status
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
ClassMethod GetCoupleCompetitionsCount(competitionId As %String, coupleId As %String) As %Status
{
	set trnId = ""
	&sql(SELECT Competition->Tournament INTO :trnId 
		 FROM Dance_Data.Participant 
		 WHERE Competition = :competitionId AND Couple = :coupleId)
	
	set count = 0
	&sql(SELECT COUNT(ID) INTO :count 
		 FROM Dance_Data.Participant 
		 WHERE IsActive=1 AND Couple = :coupleId AND Competition->Tournament = :trnId)
	
	quit count
}



*/
]]></Content>
</UDLText>
</Class>
</Export>
