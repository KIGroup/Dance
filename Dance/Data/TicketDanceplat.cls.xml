<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Data.TicketDanceplat">
<Super>Dance.Data.Ticket</Super>
<TimeCreated>63436,51933.345197</TimeCreated>

<Property name="CodeOne">
<Type>%String</Type>
</Property>

<Property name="CodeTwo">
<Type>%String</Type>
</Property>

<Method name="ConvertToProxyObject">
<ClassMethod>1</ClassMethod>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	/*
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.number = ..Number
	set proxy.amount = ..Amount
	set proxy.title = ..Title
	set proxy.status = ..TStatus.ConvertToProxyObject()
	set proxy.created = ..Created
	set proxy.updated = ..Updated
	set proxy.participant = ..Participant.ConvertToProxyObject()
	*/
	quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st]]></FormalSpec>
<ReturnType>Ticket</ReturnType>
<Implementation><![CDATA[
	#dim obj As TicketDanceplat
	
	if (..NumberIdxExists(data.number)){
		set obj = ..NumberIdxOpen(data.number,,.st)	
	}
	else{
		set obj = ..%New()
		set obj.Number = data.number	
		set obj.Participant = ##class(Dance.Data.Participant).%OpenId(data.participant.id)
	}
	
	set obj.Amount = data.amount
	set obj.TStatus = ##class(TicketStatus).%OpenId(data.status.id)
	set obj.Title = data.title
	set obj.Created = data.paymentCreated
	set obj.Updated = $ZDT($ZTS, 3)
	
	set obj.CodeOne = data.codeOne
	set obj.CodeTwo = data.codeTwo
	
	set st = obj.%Save()

	quit obj
]]></Implementation>
</Method>

<Method name="SaveAllFromImportTable">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	do ##class(Dance.Utils.Journal).Create("Log", "Dance.Data.TicketDanceplat.TaskTickets.SaveAllFromImportTable()", "Start")
	
	try{
		set count = 0
		&sql(DECLARE TicketCurs CURSOR FOR 
		 	 SELECT ID
		 	 FROM Dance_Data_Import.TicketDanceplat as tic
		 	 WHERE (SELECT cmp.Tournament->TStatus->Code FROM Dance_Data.Competition as cmp WHERE cmp.IdInternal = tic.GroupIdInternal) = 'Registration'
		 	 ORDER BY ID DESC)	
		
		&sql(OPEN TicketCurs)
		for  
		{	
			&sql(FETCH TicketCurs INTO :id) 
			quit:(SQLCODE '= 0)
			
			set ticketImport = ##class(Dance.Data.Import.TicketDanceplat).%OpenId(id)
			set competition = ##class(Dance.Data.Competition).IdInternalIdxOpen(ticketImport.GroupIdInternal)
			if '$ISOBJECT(competition) continue
			
			do ..SaveOneFromImportTable(ticketImport, competition)
		}
		
		&sql(CLOSE TicketCurs)	
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	do ##class(Dance.Utils.Journal).Create("Log", "Dance.Data.TicketDanceplat.TaskTickets.SaveAllFromImportTable()", "End")
	
	quit st
]]></Implementation>
</Method>

<Method name="SaveOneFromImportTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat,competition:Dance.Data.Competition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	set isTrace = $$$YES
	w:(isTrace) !,!,"Start 'SaveOneFromImportTable' ticketId="_ticketImport.%Id()
	
	try{
		do ##class(Dance.Utils.Journal).Create("Log", "SaveOneFromImportTable(ticketImportId="_ticketImport.%Id()_")", "Start, trnId="_competition.Tournament.%Id()_" cmpId="_competition.%Id())
		
		TSTART
		
		if (ticketImport.MaleLastName = "") && (ticketImport.FemaleLastName = ""){
			$$$THROWONERROR(st, ##class(Dance.Utils.Msg).GetErrorStatus("error_Ticket_EmptyFields"))
		}
		
		#dim participant As Dance.Data.Participant = ""
		
		// Find UDSR By Number
		#dim manUDSR As Dance.Data.PersonUDSR = ..GetPersonUDSRFromImportedTicket(ticketImport, "Male")
		#dim womanUDSR As Dance.Data.PersonUDSR = ..GetPersonUDSRFromImportedTicket(ticketImport, "Female")
		
		if $ISOBJECT(manUDSR) || $ISOBJECT(womanUDSR){
			// UDSR couple or athlete	
			set prtObject = ""
			set prtClassName = "Dance.Data.ParticipantSingleUDSR"
	
			if $ISOBJECT(manUDSR) && $ISOBJECT(womanUDSR){
				w:(isTrace) !,"--Find man and woman UDSR."
				
				// Couple UDSR
				set prtObject = ##class(Dance.Data.CoupleUDSR).GetByNumbers(manUDSR.Number, womanUDSR.Number,.st)	
				set prtClassName = "Dance.Data.ParticipantCoupleUDSR"
				$$$THROWONERROR(st, st)
			}
			elseif $ISOBJECT(manUDSR){
				w:(isTrace) !,"--Find man UDSR."
				
				// Athlete UDSR, Male
				set prtObject = manUDSR
			}
			elseif $ISOBJECT(womanUDSR){
				w:(isTrace) !,"--Find woman UDSR."
				
				// Athlete UDSR, Female
				set prtObject = womanUDSR
			}
			
			// Create participant	
			set participant = $CLASSMETHOD(prtClassName, "Create", ##class(Dance.Data.Recorder).GetSystemRecorder(), competition, prtObject.ConvertToProxyObject(), .st)
			$$$THROWONERROR(st, st)
		}
		else {
			// WDSF couple|athlete OR Other couple|athlete
			if (ticketImport.MaleLastName '= "") && (ticketImport.FemaleLastName '= ""){
				// Couple
				// Find WDSF couple
				set coupleWDSF = ..GetCoupleWDSFFromImportedTicket(ticketImport)
				if $ISOBJECT(coupleWDSF){
					w:(isTrace) !,"---Find couple WDSF."
					
					set participant = ##class(Dance.Data.ParticipantCoupleWDSF).Create(##class(Recorder).GetSystemRecorder(), competition, coupleWDSF.ConvertToProxyObject(), .st)
					$$$THROWONERROR(st, st)
				}
				else{
					w:(isTrace) !,"---Create prt couple Other."
					// Create participantCoupleOther
					set participant = ..CreateParticipantOtherFromImportedTicket(ticketImport, competition, $$$NO)
				}
			}
			else{
				// Athlete (Single, solo)
				// Find WDSF person
				set athlteWDSF = $SELECT(ticketImport.MaleLastName = "" : ..GetPersonWDSFFromImportedTicket(ticketImport, "Female"),
																 $$$YES : ..GetPersonWDSFFromImportedTicket(ticketImport, "Male"))
			
				if $ISOBJECT(athlteWDSF){
					w:(isTrace) !,"---Find person WDSF."
					set participant = ##class(Dance.Data.ParticipantSingleWDSF).Create(##class(Recorder).GetSystemRecorder(), competition, athleteWDSF.ConvertToProxyObject(), .st)
					$$$THROWONERROR(st, st)
				}
				else{
					w:(isTrace) !,"---Create prt single Other."
					// Create participantSingleOther
					set participant = ..CreateParticipantOtherFromImportedTicket(ticketImport, competition, $$$YES)
				}
			}	
		}
		
		if '$ISOBJECT(participant){
			$$$THROWONERROR(st, ##class(Dance.Utils.Msg).GetErrorStatus("error_Ticket_ImportedParticipantNotCreated"))
		}
		
		// Crate ticket
		set ticketData = ##class(%ZEN.proxyObject).%New()
		set ticketData.participant = participant.ConvertToProxyObject()
		set ticketData.number = ticketImport.IdInternal
		set ticketData.amount = ticketImport.Amount
		set ticketData.paymentCreated = ticketImport.PaymentCreated
		set ticketData.codeOne = ticketImport.CodeOne
		set ticketData.codeTwo = ticketImport.CodeTwo
		set ticketData.title = ticketImport.Description
		set ticketData.status = ##class(TicketStatus).CodeIdxOpen($CASE($ZCVT(ticketImport.TStatus, "L"), "pay" : "Paid", "cancel" : "Canceled", :"Not paid")).ConvertToProxyObject() 
		
		w:(isTrace) !,"Save ticket."
		do ..Save(ticketData, .st)
		$$$THROWONERROR(st, st)
		
		do ##class(Dance.Utils.Journal).Create("Log", "TicketDanceplat.SaveOneFromImportTable(ticketImportId="_ticketImport.%Id()_")", "End")
		
		TCOMMIT
		
		w:(isTrace) " Success."
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
		do $system.OBJ.DisplayError(st)
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="GetPersonUDSRFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat,gender:%String</FormalSpec>
<ReturnType>Dance.Data.PersonUDSR</ReturnType>
<Implementation><![CDATA[
	set propertyHead = $CASE(gender, "Male" : "Male", : "Female")
	
	// Find by number
	#dim person As Dance.Data.PersonUDSR = ##class(Dance.Data.PersonUDSR).NumberUDSRIdxOpen($PROPERTY(ticketImport, propertyHead_"Number"))
	quit:$ISOBJECT(person) person
	
	// Find by filter in the table
	set filter = ##class(%ZEN.proxyObject).%New()
	set filter.lastName = $PROPERTY(ticketImport, propertyHead_"LastName")
	set filter.firstName = $PROPERTY(ticketImport, propertyHead_"FirstName")
	set filter.dob = $PROPERTY(ticketImport, propertyHead_"DOBOrAge")
	set filter.age = $PROPERTY(ticketImport, propertyHead_"DOBOrAge")	
	
	quit ##class(Dance.Data.PersonUDSR).GetByFilter(filter)
]]></Implementation>
</Method>

<Method name="GetPersonWDSFFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat,gender:%String</FormalSpec>
<ReturnType>Dance.Data.PersonUDSR</ReturnType>
<Implementation><![CDATA[
	set propertyHead = $CASE(gender, "Male" : "Male", : "Female")
		
	// Find by filter in the table
	set filter = ##class(%ZEN.proxyObject).%New()
	set filter.lastName = $PROPERTY(ticketImport, propertyHead_"LastName")
	set filter.firstName = $PROPERTY(ticketImport, propertyHead_"FirstName")

	#dim person As Dance.Data.PersonWDSF = ##class(Dance.Data.PersonWDSF).GetByFilter(filter)
	quit:$ISOBJECT(person) person
	
	// Find in the controller
	set ctrlData = ##class(Dance.Wdsf.ControllerAPI).GetPersonsByFullName(filter.lastName, filter.firstName, .st)
	if $$$ISOK(st) && (ctrlData.persons.Count() '= 0){
		set person = ##class(Dance.Data.PersonWDSF).SaveFromWDSF(ctrlData.persons.GetAt(1))
	}
	
	quit person
]]></Implementation>
</Method>

<Method name="GetCoupleWDSFFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat</FormalSpec>
<ReturnType>CoupleWDSF</ReturnType>
<Implementation><![CDATA[
	set filter = ##class(%ZEN.proxyObject).%New()
	set filter.man = ##class(%ZEN.proxyObject).%New()
	set filter.man.lastName = ticketImport.MaleLastName
	set filter.man.firstName = ticketImport.MaleFirstName

	set filter.woman = ##class(%ZEN.proxyObject).%New()
	set filter.woman.lastName = ticketImport.FemaleLastName
	set filter.woman.firstName = ticketImport.FemaleFirstName
	
	// Find in DB
	set couple = ##class(CoupleWDSF).GetByFilter(filter)
	quit:$ISOBJECT(couple) couple
	
	// Find in controller DB
	set wdsfData = ##class(Dance.Wdsf.ControllerAPI).GetCoupleByName(ticketImport.MaleLastName_","_ticketImport.MaleFirstName, ticketImport.FemaleLastName_","_ticketImport.FemaleFirstName, .st)
	quit:$$$ISERR(st) $$$NULLOREF
	
	quit ##class(CoupleWDSF).GetByNumbers(wdsfDatsa.man.id, wdsfDatsa.woman.id, .st)
]]></Implementation>
</Method>

<Method name="Test">
<Description>
do ##class(Dance.Data.TicketDanceplat).Test()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try{
		for id=1:1:1100 {
			set ticket = ##class(Dance.Data.Import.TicketDanceplat).%OpenId(id,,.st)
			continue:($$$ISERR(st) || ##class(Dance.Data.Competition).IdInternalIdxExists(ticket.GroupIdInternal) = $$$NO)
			
			w !,"--------------------------------------------------------"
			w !,"Ticket "_ticket.%Id()
			w !,"Ticket male. MaleNumber="_ticket.MaleNumber_", MaleFullName="_ticket.MaleLastName_" "_ticket.MaleFirstName_"; Club="_ticket.Club_";"
			set male = ..GetPersonUDSRFromImportedTicket(ticket, "Male")
			if $ISOBJECT(male){
				w !, "Person male "_male.%Id()_". FullName="_male.LastName.Value_" "_male.FirstName.Value_"; Club="_male.Club_";"
			}
			else {
				w !, "Person male not found "
			}
			
			w !
			w !,"Ticket female. FemaleNumber="_ticket.FemaleNumber_", FemaleFullName="_ticket.FemaleLastName_" "_ticket.FemaleFirstName_"; Club="_ticket.Club_";"
			set female = ..GetPersonUDSRFromImportedTicket(ticket, "Female")
			if $ISOBJECT(female){
				w !, "Person female "_female.%Id()_". FullName="_female.LastName.Value_" "_female.FirstName.Value_"; Club="_female.Club_";"
			}
			else {
				w !, "Person female not found "
			}
			
			if ($ISOBJECT(male) && '$ISOBJECT(female)) || ('$ISOBJECT(male) && $ISOBJECT(female)){
				w !, "-- one from couple exists"
			}
		}
	}
	catch(ex){
		do $SYSTEM.OBJ.DisplayError(ex.AsStatus())
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateParticipantOtherFromImportedTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.TicketDanceplat,competition:Competition,isSolo:%Boolean</FormalSpec>
<ReturnType>Participant</ReturnType>
<Implementation><![CDATA[
	set data = ##class(%ZEN.proxyObject).%New()
	set data.competitionId = competition.%Id()
	set data.otherInfo = ##class(%ZEN.proxyObject).%New()
	set data.otherInfo.club = ticketImport.Club
	set data.otherInfo.city = ticketImport.City
	set data.otherInfo.mainTrainer = $P(ticketImport.Trainers, ",", 1)
	set data.otherInfo.otherTrainers = $P(ticketImport.Trainers, ",", 2, *)
	
	set prtClass = ""
	if (isSolo){
		if (ticketImport.FemaleLastName = ""){
			set data.lastName = ticketImport.MaleLastName
			set data.firstName = ticketImport.MaleFirstName
			set data.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
		}
		else{
			set data.lastName = ticketImport.FemaleLastName
			set data.firstName = ticketImport.FemaleFirstName
			set data.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
		}
		
		set prtClass = "Dance.Data.ParticipantSingleOther"
	}
	else{
		set data.man = ##class(%ZEN.proxyObject).%New()
		set data.man.lastName = ticketImport.MaleLastName
		set data.man.firstName = ticketImport.MaleFirstName
		set data.man.dob = ..GetCorrectDOB(ticketImport.MaleDOBOrAge)
		
		set data.woman = ##class(%ZEN.proxyObject).%New()
		set data.woman.lastName = ticketImport.FemaleLastName
		set data.woman.firstName = ticketImport.FemaleFirstName
		set data.woman.dob = ..GetCorrectDOB(ticketImport.FemaleDOBOrAge)
	
		set prtClass = "Dance.Data.ParticipantCoupleOther"
	}
	
	// Find for ticket competition in DB
	set prt = $CLASSMETHOD(prtClass, "GetByFilter", data)
	quit:$ISOBJECT(prt) prt
	
	set data.otherInfo.country = ##class(Country).GetByName("--Unknown--").ConvertToProxyObject()
	
	// Create
	set prt = $CLASSMETHOD(prtClass, "Create", ##class(Recorder).GetSystemRecorder(), competition, data, .st)
	quit prt
]]></Implementation>
</Method>

<Method name="GetCorrectDOB">
<ClassMethod>1</ClassMethod>
<FormalSpec>dob:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ($FIND(dob, "-") '= 0){
		// date YYYY-MM-DD
		return dob
	}
	if (+dob > 0) {
		// Now year - Age
		return ($P($ZD($H, 3), "-", 1) - dob)_"-01-01"
	}
	
	// 1840-12-31
	quit $ZD(0, 3)
]]></Implementation>
</Method>

<Method name="TestUDSR">
<ClassMethod>1</ClassMethod>
<FormalSpec>id</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ticketImport = ##class(Dance.Data.Import.TicketDanceplat).%OpenId(id)
	set competition = ##class(Dance.Data.Competition).IdInternalIdxOpen(ticketImport.GroupIdInternal)
	do ..SaveOneFromImportTable(ticketImport, competition)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>TicketDanceplatDefaultData</DefaultData>
<Data name="TicketDanceplatDefaultData">
<Subscript>"TicketDanceplat"</Subscript>
<Value name="1">
<Value>CodeOne</Value>
</Value>
<Value name="2">
<Value>CodeTwo</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
