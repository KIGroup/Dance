<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Data.Competition">
<Description>
Competition in the tournament, has participants</Description>
<Super>%Persistent</Super>
<TimeCreated>63289,41033.08287</TimeCreated>

<Property name="Tournament">
<Type>Dance.Data.Tournament</Type>
<Cardinality>one</Cardinality>
<Inverse>Competitions</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="IdInternal">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="IdExternal">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Name">
<Type>Dance.Data.Localization.LText</Type>
<Required>1</Required>
</Property>

<Property name="Discipline">
<Type>Discipline</Type>
<Required>1</Required>
</Property>

<Property name="AgeCategory">
<Type>AgeCategory</Type>
<Required>1</Required>
</Property>

<Property name="DancerClasses">
<Type>DancerClass</Type>
<Collection>array</Collection>
<Required>1</Required>
</Property>

<Property name="Type">
<Type>CompetitionType</Type>
<Required>1</Required>
</Property>

<Property name="StartDate">
<Type>%Date</Type>
<Required>1</Required>
<Parameter name="FORMAT" value="3"/>
</Property>

<Property name="StartTime">
<Type>%Time</Type>
</Property>

<Property name="Price">
<Type>%Float</Type>
<Required>1</Required>
</Property>

<Property name="WDSF">
<Type>CompetitionWDSF</Type>
</Property>

<Property name="Limit">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="ParticipantsCount">
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>set {ParticipantsCount} = ##class({%%CLASSNAME}).GetParticipantsCount({%%ID})</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="Participants">
<Type>Dance.Data.Participant</Type>
<Cardinality>many</Cardinality>
<Inverse>Competition</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="IsActive">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Required>1</Required>
</Property>

<Index name="TournamentIdx">
<Properties>Tournament</Properties>
</Index>

<Index name="IdInternalIdx">
<Properties>IdInternal</Properties>
<Unique>1</Unique>
</Index>

<Index name="WDSFIdx">
<Properties>WDSF</Properties>
<Unique>1</Unique>
</Index>

<Method name="ConvertToProxyObject">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set proxy = ##class(%ZEN.proxyObject).%New()
	set proxy.id = ..%Id()
	set proxy.name = ..Name.Value
	set proxy.tournament = ..Tournament.ConvertToProxyObject()
	set proxy.discipline = ..Discipline.ConvertToProxyObject()
	set proxy.ageCategory = ..AgeCategory.ConvertToProxyObject()
	set proxy.type = ..Type.ConvertToProxyObject()
	
	set proxy.startDate = $ZDATE(..StartDate, 3)
	set proxy.startTime = $e(##class(%Library.Time).LogicalToDisplay(..StartTime), 1, 5)
	
	if $ISOBJECT(..WDSF){
		set proxy.wdsf = ..WDSF.ConvertToProxyObject()
		set proxy.isInternational = $$$YES
	}
	
	set proxy.price = ..Price
	set proxy.limit = ..Limit
	//set proxy.isInternational = ..IsInternational
	
	set proxy.idInternal = ..IdInternal
	set proxy.idExternal = ..IdExternal 
	
	// DancerClasses array
	set proxy.dancerClasses = ##class(%ListOfObjects).%New()
	set dcKey = ""
	for i=1:1:..DancerClasses.Count(){
		set dcKey = ..DancerClasses.Next(dcKey)
		set dc = ..DancerClasses.GetAt(dcKey)
		do proxy.dancerClasses.Insert(dc.ConvertToProxyObject())
	}
	
	set proxy.participantsCount = ..ParticipantsCount
	
	quit proxy
]]></Implementation>
</Method>

<Method name="Save">
<Description>
Create or update competition</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[data:%RegisteredObject,&st]]></FormalSpec>
<ReturnType>Competition</ReturnType>
<Implementation><![CDATA[
	do ##class(Dance.Utils.Journal).Create("Log", "Data.Competition.Save",
	"ID="_data.id_";"_
	"IdInternal="_data.idInternal_";"_
	"IdExternal="_data.idExternal_";"_
	"Name="_$ZCVT(data.name,"I", "UTF8")_";"_
	"TournamentId="_data.tournamentId_";"_
	"DisciplineId="_data.discipline.id_";"_
	"AgeCategoryId="_data.ageCategory.id_";"_
	"TypeId="_data.type.id_";"_
	"StartDate="_data.startDate_";"_
	"Price="_data.price)
    
    
    if (data.id = ""){
    	set trn = ##class(Dance.Data.Tournament).%OpenId(data.tournamentId)
    	set cmp = ##class(Dance.Data.Competition).%New()
      	set cmp.Name = ##class(Dance.Data.Localization.LText).Create($ZCVT(data.name,"I", "UTF8"))
      	set cmp.Tournament = trn
    }
    else{
	    set cmp = ##class(Dance.Data.Competition).%OpenId(data.id)
      	set cmp.Name.Value = $ZCVT(data.name,"I", "UTF8")
    }
    
    if (data.isInternational = 1) && $ISOBJECT(data.wdsf){
    	set cmp.WDSF = ##class(CompetitionWDSF).%OpenId(data.wdsf.id)
    }
    else{
	    set cmp.WDSF = $$$NULLOREF
    }
    
      	
    set cmp.Discipline = ##class(Dance.Data.Discipline).%OpenId(data.discipline.id)
    set cmp.AgeCategory = ##class(Dance.Data.AgeCategory).%OpenId(data.ageCategory.id)
    set cmp.Type = ##class(Dance.Data.CompetitionType).%OpenId(data.type.id)
      	
    set cmp.StartDate = $ZDATEH(data.startDate, 15)
    set cmp.StartTime = ##class(%Library.Time).DisplayToLogical(data.startTime)
      	
    set cmp.Price = data.price
    set cmp.Limit = data.limit
      
    set cmp.IdInternal = data.idInternal
    set cmp.IdExternal = data.idExternal
      	
	// DancerClasses array
	do cmp.DancerClasses.Clear()
    for i=1:1:data.dancerClasses.Count(){
	    continue:(data.dancerClasses.GetAt(i).selected '= $$$YES)
	      	
	    set dancerClasses = ##class(Dance.Data.DancerClass).%OpenId(data.dancerClasses.GetAt(i).id,,.st)
	    if $$$ISERR(st) return ##class(Dance.Utils.Msg).GetErrorStatus("error_DancerClassNotFound"," | "_st)
	    
	    do cmp.DancerClasses.SetAt(dancerClasses, dancerClasses.%Id())
	}
      	
    set st = cmp.%Save()
    
    quit st
]]></Implementation>
</Method>

<Method name="Deactivate">
<Description>
Change IsActive property to 0</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	do ##class(Dance.Utils.Journal).Create("Log", "Data.Competition.Deactivate", "ID="_id_";")
	
	set cmp = ..%OpenId(id)
	set cmp.IsActive = 0
	set cmp.IdInternal = cmp.IdInternal_";"_id
	set cmp.IdExternal = cmp.IdExternal_";"_id
	
	quit cmp.%Save()
]]></Implementation>
</Method>

<Method name="GetParticipantsCount">
<Description>
Participants count in the competition</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>competitionId:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set count = 0
	&sql(SELECT COUNT(ID) INTO :count
		 FROM Dance_Data.Participant 
		 WHERE Competition = :competitionId AND IsActive = 1)
	
	quit count
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Dance.Data.CompetitionD</DataLocation>
<DefaultData>CompetitionDefaultData</DefaultData>
<IdLocation>^Dance.Data.CompetitionD</IdLocation>
<IndexLocation>^Dance.Data.CompetitionI</IndexLocation>
<StreamLocation>^Dance.Data.CompetitionS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="AgeCategories">
<Attribute>AgeCategories</Attribute>
<Structure>subnode</Structure>
<Subscript>"AgeCategories"</Subscript>
</Data>
<Data name="CompetitionDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Tournament</Value>
</Value>
<Value name="3">
<Value>StartDate</Value>
</Value>
<Value name="4">
<Value>StartTime</Value>
</Value>
<Value name="5">
<Value>Name</Value>
</Value>
<Value name="6">
<Value>Discipline</Value>
</Value>
<Value name="7">
<Value>Price</Value>
</Value>
<Value name="8">
<Value>Currency</Value>
</Value>
<Value name="9">
<Value>AgeCategory</Value>
</Value>
<Value name="10">
<Value>TournamentUDSRID</Value>
</Value>
<Value name="11">
<Value>GroupUDSRID</Value>
</Value>
<Value name="12">
<Value>GroupUDSRIDExt</Value>
</Value>
<Value name="13">
<Value>Limit</Value>
</Value>
<Value name="14">
<Value>Solo</Value>
</Value>
<Value name="15">
<Value>Type</Value>
</Value>
<Value name="16">
<Value>IsInternational</Value>
</Value>
<Value name="17">
<Value>IdInternal</Value>
</Value>
<Value name="18">
<Value>IdExternal</Value>
</Value>
<Value name="19">
<Value>IsActive</Value>
</Value>
<Value name="20">
<Value>IdWDSF</Value>
</Value>
<Value name="21">
<Value>WDSF</Value>
</Value>
</Data>
<Data name="DancerClasses">
<Attribute>DancerClasses</Attribute>
<Structure>subnode</Structure>
<Subscript>"DancerClasses"</Subscript>
</Data>
</Storage>
</Class>
</Export>
