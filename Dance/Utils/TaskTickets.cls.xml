<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="Dance.Utils.TaskTickets">
<Super>%SYS.Task.Definition</Super>
<TimeCreated>63324,68778.945644</TimeCreated>

<Method name="OnTask">
<Description><![CDATA[
This method is responsible for executing the task.<br>
At the scheduled time, the Task Manager creates an instance of this object,
sets any property values using the stored "settings" for the task, and then
invokes this method to execute the task.<br>
In order to execute a real task, override this method in a subclass.]]></Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ##class(Dance.Utils.TaskTickets).Import()
]]></Implementation>
</Method>

<Method name="Import">
<Description>
do ##class(Dance.Utils.TaskTickets).Import()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d ##class(Dance.Data.Import.Ticket).%KillExtent()
	d ##class(Dance.Data.Ticket).%KillExtent()
	
	set st = $$$OK
	
	try{
		&sql(DECLARE TCur CURSOR FOR 
		 	 SELECT IdInternal, Hash
		 	 FROM Dance_Data.Tournament
		 	 WHERE IsActive = 1 AND TStatus->Code='Registration')	
		
		&sql(OPEN TCur)
		for  
		{	
			&sql(FETCH TCur INTO :idInternal, :hash) 
			quit:(SQLCODE '= 0)
			set page = $G(^Settings("Dance", "Import", "TicketsPage"))_"?trn="_idInternal_"&hash="_hash_"&all=1"
			w ##class(Dance.Data.Import.ImportBase).Import("Dance.Data.Import.Ticket", page)    
		}
		
		&sql(CLOSE TCur)
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	do ..CreateAllTickets()
	quit st
]]></Implementation>
</Method>

<Method name="CreateAllTickets">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateAllTickets()", "Start")
	
	try{
		&sql(DECLARE TicketCurs CURSOR FOR 
		 	 SELECT ID
		 	 FROM Dance_Data_Import.Ticket as tic
		 	 WHERE (SELECT cmp.Tournament->TStatus->Code FROM Dance_Data.Competition as cmp WHERE cmp.IdInternal = tic.GroupIdInternal) = 'Registration')	
		
		&sql(OPEN TicketCurs)
		for  
		{	
			&sql(FETCH TicketCurs INTO :id) 
			quit:(SQLCODE '= 0)
			
			set ticketImport = ##class(Dance.Data.Import.Ticket).%OpenId(id)
			set competition = ##class(Dance.Data.Competition).IdInternalIdxOpen(ticketImport.GroupIdInternal)
			if '$ISOBJECT(competition) continue
			
			do ..CreateOneTicket(ticketImport, competition)
		}
		
		&sql(CLOSE TicketCurs)	
	}
	catch(ex){
		set st = ex.AsStatus()
	}
	
	do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateAllTickets()", "End")
	
	quit st
]]></Implementation>
</Method>

<Method name="CreateOneTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec>ticketImport:Dance.Data.Import.Ticket,competition:Dance.Data.Competition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	
	try{
		TSTART
		
		do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateOneTicket(ticketImportId="_ticketImport.%Id()_")", "Start, trnId="_competition.Tournament.%Id()_" cmpId="_competition.%Id())
		
		// Find UDSR|WDSF persons
		set man = ##class(Dance.Data.Person).GetByNumber(ticketImport.MaleNumber)
		set woman = ##class(Dance.Data.Person).GetByNumber(ticketImport.FemaleNumber)
			
		set couple = ""		
	
		if $ISOBJECT(man) && $ISOBJECT(woman){
			do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateOneTicket(ticketImportId="_ticketImport.%Id()_")", "Man is object, Woman is object. Man data = {id: '"_man.%Id()_"', lastName: '"_man.LastName.Value_"'} Woman data = {id: '"_woman.%Id()_"', lastName: '"_woman.LastName.Value_"'}")
			set couple = ##class(Dance.Data.Couple).Create(man.%Id(), woman.%Id(), .st)
			$$$THROWONERROR(st, st)
		}
		elseif $ISOBJECT(man){
			do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateOneTicket(ticketImportId="_ticketImport.%Id()_")", "Man is object, Woman is NULL. Man data = {id: '"_man.%Id()_"', lastName: '"_man.LastName.Value_"'}")
			set couple = ##class(Dance.Data.Couple).Create(man.%Id(), man.%Id(), .st)
			$$$THROWONERROR(st, st)
		}
		elseif $ISOBJECT(woman){
			do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateOneTicket(ticketImportId="_ticketImport.%Id()_")", "Man is NULL, Woman is object. Woman data = {id: '"_woman.%Id()_"', lastName: '"_woman.LastName.Value_"'}")
			set couple = ##class(Dance.Data.Couple).Create(woman.%Id(), woman.%Id(), .st)
			$$$THROWONERROR(st, st)
		}
		else{
			// Unknown couple|solo
			set couple = ..CreateCoupleFromTicket(ticketImport, .st)
			$$$THROWONERROR(st, st)
		}
			
		set ticketData = ##class(%ZEN.proxyObject).%New()
		set ticketData.idInternal = ticketImport.IdInternal
		set ticketData.amount = ticketImport.Amount
		set ticketData.paymentCreated = ticketImport.PaymentCreated
		set ticketData.codeOne = ticketImport.CodeOne
		set ticketData.codeTwo = ticketImport.CodeTwo
		set ticketData.description = ticketImport.Description
		set ticketData.tStatus = ticketImport.TStatus
			
		set participant = ##class(Dance.Data.Participant).Create(competition.%Id(), couple.%Id(), .st)
		$$$THROWONERROR(st, st)
			
		set ticketData.participantId = participant.%Id()
		do ##class(Dance.Data.Ticket).Save(ticketData, .st)
		$$$THROWONERROR(st, st)
		
		do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateOneTicket(ticketImportId="_ticketImport.%Id()_")", "End")
			
		TCOMMIT
	}
	catch(ex){
		TROLLBACK
		set st = ex.AsStatus()
		do $system.OBJ.DisplayError(st)
	}
	
	quit st
]]></Implementation>
</Method>

<Method name="CreateCoupleFromTicket">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ticket:Dance.Data.Import.Ticket,&st]]></FormalSpec>
<ReturnType>Dance.Data.Couple</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	set couple  = ""
	
	try{
		TSTART
		
		do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "Start")
			
		if ($LENGTH(ticket.MaleLastName) < 2) set ticket.MaleLastName = ""
		if ($LENGTH(ticket.FemaleLastName) < 2) set ticket.FemaleLastName = ""
		
		if (ticket.MaleLastName = "") && (ticket.FemaleLastName = ""){
			 $$$ThrowStatus(##class(Dance.Utils.Msg).GetErrorStatus("EmptyMaleAndFemaleNamesOnTicket"))
		}
		
		set trn = ##class(Dance.Data.Tournament).IdExternalIdxOpen(ticket.TournamentIdExternal)
		#dim manPerson, womanPerson As Dance.Data.Person = ""
		set isSolo = 0
		
		if (ticket.FemaleLastName = ""){
			// Man solo, but its may be woman solo, because danceplat programmers is ####### 
			// Find person in the "Person" table
			do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "- ticket.FemaleLastName is null")
			
			set isSolo = $$$YES
			set manPerson = ##class(Dance.Data.Tournament).GetPersonByFullNameFromTournament(trn.%Id(), ticket.MaleLastName, ticket.MaleFirstName)
			
			if '$ISOBJECT(manPerson){
				do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "-- manPerson is null")
			
				// Find man in the ParticipantTemp table, man solo
				set manPrt = ##class(Dance.Data.ParticipantTemp).GetManSolo(trn.%Id(), ticket.MaleLastName, ticket.MaleFirstName)
				
				if '$ISOBJECT(manPrt){
					do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "--- manPrt is null")
			
					// May be woman solo? Let's find
					set womanPrt = ##class(Dance.Data.ParticipantTemp).GetWomanSolo(trn.%Id(), ticket.MaleLastName, ticket.MaleFirstName)
					
					if '$ISOBJECT(womanPrt){
						do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "---- womanPrt is null")
	
						// Its data from danceplat DB, in our DB is not exists. We need to create this person.
						set manPerson = ##class(Dance.Data.Import.Ticket).CreatePersonFromTicket(ticket, 1, .st)
						$$$THROWONERROR(st, st)			
					}
					else{
						do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "---- womanPrt is object")
	
						// create new "Person" item from ParticipantItem
						set womanPerson = ##class(Dance.Data.ParticipantTemp).CreatePersonFromParticipantTemp(womanPrt, 0, .st)
						$$$THROWONERROR(st, st)
					}
				}
				else{
					do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "--- manPrt is object")
	
					// create new "Person" item from ParticipantItem
					set manPerson = ##class(Dance.Data.ParticipantTemp).CreatePersonFromParticipantTemp(manPrt, 1, .st)
					$$$THROWONERROR(st, st)	
				}
			}
		}
		elseif (ticket.MaleLastName = ""){
			do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "- ticket.MaleLastName is null")
	
			// Woman solo
			// Find person in the "Person" table
			set isSolo = $$$YES
			set womanPerson = ##class(Dance.Data.Tournament).GetPersonByFullNameFromTournament(trn.%Id(), ticket.FemaleLastName, ticket.FemaleFirstName)
			
			if '$ISOBJECT(womanPerson){
				do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "-- womanPerson is null")

				// Find woman in the ParticipantTemp table, woman solo
				set womanPrt = ##class(Dance.Data.ParticipantTemp).GetWomanSolo(trn.%Id(), ticket.FemaleLastName, ticket.FemaleFirstName)
				
				if '$ISOBJECT(womanPrt){
					do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "--- womanPrt is null")

					// Its data from danceplat DB, in our DB is not exists. We need to create this person.
					set womanPerson = ##class(Dance.Data.Import.Ticket).CreatePersonFromTicket(ticket, 0, .st)
					$$$THROWONERROR(st, st)	
				}
				else{
					do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "--- womanPrt is object")
					
					// create new "Person" item from ParticipantItem
					set womanPerson = ##class(Dance.Data.ParticipantTemp).CreatePersonFromParticipantTemp(womanPrt, 0, .st)
					$$$THROWONERROR(st, st)	
				}
			}	
		}
		else{
			do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "- Couple")
					
			// Couple
			// Find person in the "Person" table
			set manPerson = ##class(Dance.Data.Tournament).GetPersonByFullNameFromTournament(trn.%Id(), ticket.MaleLastName, ticket.MaleFirstName)
			set womanPerson = ##class(Dance.Data.Tournament).GetPersonByFullNameFromTournament(trn.%Id(), ticket.FemaleLastName, ticket.FemaleFirstName)
			
			if '$ISOBJECT(manPerson){
				do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "-- manPerson is null")
			
				// Find woman in the ParticipantTemp table, woman solo
				set manPrt = ##class(Dance.Data.ParticipantTemp).GetWomanSolo(trn.%Id(), ticket.MaleLastName, ticket.MaleFirstName)
				
				if '$ISOBJECT(manPrt){
					do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "--- manPrt is null")
			
					// Its data from danceplat DB, in our DB is not exists. We need to create this person.
					set manPerson = ##class(Dance.Data.Import.Ticket).CreatePersonFromTicket(ticket, 1, .st)
					$$$THROWONERROR(st, st)	
				}
				else{
					do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "--- manPrt is object")
			
					// create new "Person" item from ParticipantItem
					set manPerson = ##class(Dance.Data.ParticipantTemp).CreatePersonFromParticipantTemp(manPrt, 1, .st)
					$$$THROWONERROR(st, st)	
				}
			}
			
			if '$ISOBJECT(womanPerson){
				do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "-- womanPerson is null")
				
				// Find woman in the ParticipantTemp table, woman solo
				set womanPrt = ##class(Dance.Data.ParticipantTemp).GetWomanSolo(trn.%Id(), ticket.FemaleLastName, ticket.FemaleFirstName)
				
				if '$ISOBJECT(womanPrt){
					do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "--- womanPrt is null")
		
					// Its data from danceplat DB, in our DB is not exists. We need to create this person.
					set womanPerson = ##class(Dance.Data.Import.Ticket).CreatePersonFromTicket(ticket, 0, .st)
					$$$THROWONERROR(st, st)	
				}
				else{
					do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "--- womanPrt is object")
	
					// create new "Person" item from ParticipantItem
					set womanPerson = ##class(Dance.Data.ParticipantTemp).CreatePersonFromParticipantTemp(womanPrt, 0, .st)
					$$$THROWONERROR(st, st)	
				}
			}		
		}
		
		if (isSolo) && $ISOBJECT(manPerson){
			do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "Solo, manPerson not null")
	
			set couple = ##class(Dance.Data.Couple).Create(manPerson.%Id(), manPerson.%Id(), .st)
			$$$THROWONERROR(st, st)			
		}
		elseif (isSolo) && $ISOBJECT(womanPerson){
			do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "Solo, womanPerson not null")
			
			set couple = ##class(Dance.Data.Couple).Create(womanPerson.%Id(), womanPerson.%Id(), .st)
			$$$THROWONERROR(st, st)	
		}
		elseif $ISOBJECT(manPerson) &&  $ISOBJECT(womanPerson){
			do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "manPerson not null, womanPerson not null")
			
			set couple = ##class(Dance.Data.Couple).Create(manPerson.%Id(), womanPerson.%Id(), .st)
			$$$THROWONERROR(st, st)	
		}
		else{
			do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "This is not good")
		}
		
		do ##class(Dance.Utils.Journal).Create("Log", "TaskTickets.CreateCoupleFromTicket(ticketImportId="_ticket.%Id()_")", "End")
		
		TCOMMIT
	}
	catch(ex){
		TROLLBACK 1
		
		set st = ex.AsStatus()
		do ##class(Dance.Utils.Journal).Create("Error", "TaskTickets.CreateOneTicket(),CreateCoupleFromTicket()", st)
		
	}
	
	quit couple
]]></Implementation>
</Method>
</Class>
</Export>
